/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerReturnRequestsModelDto } from '../model';
// @ts-ignore
import { SubmitReturnRequestModelDto } from '../model';
// @ts-ignore
import { SubmitReturnRequestModelDtoBaseModelDtoRequest } from '../model';
// @ts-ignore
import { UploadFileResponse } from '../model';
/**
 * ReturnRequestApi - axios parameter creator
 * @export
 */
export const ReturnRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestCustomerReturnRequestsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ReturnRequest/CustomerReturnRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestReturnRequestOrderIdGet: async (orderId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiFrontendReturnRequestReturnRequestOrderIdGet', 'orderId', orderId)
            const localVarPath = `/api-frontend/ReturnRequest/ReturnRequest/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} orderId 
         * @param {SubmitReturnRequestModelDtoBaseModelDtoRequest} [submitReturnRequestModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestReturnRequestSubmitOrderIdPost: async (orderId: number, submitReturnRequestModelDtoBaseModelDtoRequest?: SubmitReturnRequestModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('apiFrontendReturnRequestReturnRequestSubmitOrderIdPost', 'orderId', orderId)
            const localVarPath = `/api-frontend/ReturnRequest/ReturnRequestSubmit/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitReturnRequestModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileName 
         * @param {string} contentType 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestUploadFileReturnRequestPost: async (fileName: string, contentType: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiFrontendReturnRequestUploadFileReturnRequestPost', 'fileName', fileName)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('apiFrontendReturnRequestUploadFileReturnRequestPost', 'contentType', contentType)
            const localVarPath = `/api-frontend/ReturnRequest/UploadFileReturnRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['contentType'] = contentType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnRequestApi - functional programming interface
 * @export
 */
export const ReturnRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendReturnRequestCustomerReturnRequestsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerReturnRequestsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendReturnRequestCustomerReturnRequestsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendReturnRequestReturnRequestOrderIdGet(orderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitReturnRequestModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendReturnRequestReturnRequestOrderIdGet(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} orderId 
         * @param {SubmitReturnRequestModelDtoBaseModelDtoRequest} [submitReturnRequestModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendReturnRequestReturnRequestSubmitOrderIdPost(orderId: number, submitReturnRequestModelDtoBaseModelDtoRequest?: SubmitReturnRequestModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitReturnRequestModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendReturnRequestReturnRequestSubmitOrderIdPost(orderId, submitReturnRequestModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileName 
         * @param {string} contentType 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendReturnRequestUploadFileReturnRequestPost(fileName: string, contentType: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendReturnRequestUploadFileReturnRequestPost(fileName, contentType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnRequestApi - factory interface
 * @export
 */
export const ReturnRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestCustomerReturnRequestsGet(options?: any): AxiosPromise<CustomerReturnRequestsModelDto> {
            return localVarFp.apiFrontendReturnRequestCustomerReturnRequestsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestReturnRequestOrderIdGet(orderId: number, options?: any): AxiosPromise<SubmitReturnRequestModelDto> {
            return localVarFp.apiFrontendReturnRequestReturnRequestOrderIdGet(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} orderId 
         * @param {SubmitReturnRequestModelDtoBaseModelDtoRequest} [submitReturnRequestModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestReturnRequestSubmitOrderIdPost(orderId: number, submitReturnRequestModelDtoBaseModelDtoRequest?: SubmitReturnRequestModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<SubmitReturnRequestModelDto> {
            return localVarFp.apiFrontendReturnRequestReturnRequestSubmitOrderIdPost(orderId, submitReturnRequestModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileName 
         * @param {string} contentType 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendReturnRequestUploadFileReturnRequestPost(fileName: string, contentType: string, body?: string, options?: any): AxiosPromise<UploadFileResponse> {
            return localVarFp.apiFrontendReturnRequestUploadFileReturnRequestPost(fileName, contentType, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnRequestApi - object-oriented interface
 * @export
 * @class ReturnRequestApi
 * @extends {BaseAPI}
 */
export class ReturnRequestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnRequestApi
     */
    public apiFrontendReturnRequestCustomerReturnRequestsGet(options?: any) {
        return ReturnRequestApiFp(this.configuration).apiFrontendReturnRequestCustomerReturnRequestsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnRequestApi
     */
    public apiFrontendReturnRequestReturnRequestOrderIdGet(orderId: number, options?: any) {
        return ReturnRequestApiFp(this.configuration).apiFrontendReturnRequestReturnRequestOrderIdGet(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} orderId 
     * @param {SubmitReturnRequestModelDtoBaseModelDtoRequest} [submitReturnRequestModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnRequestApi
     */
    public apiFrontendReturnRequestReturnRequestSubmitOrderIdPost(orderId: number, submitReturnRequestModelDtoBaseModelDtoRequest?: SubmitReturnRequestModelDtoBaseModelDtoRequest, options?: any) {
        return ReturnRequestApiFp(this.configuration).apiFrontendReturnRequestReturnRequestSubmitOrderIdPost(orderId, submitReturnRequestModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileName 
     * @param {string} contentType 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnRequestApi
     */
    public apiFrontendReturnRequestUploadFileReturnRequestPost(fileName: string, contentType: string, body?: string, options?: any) {
        return ReturnRequestApiFp(this.configuration).apiFrontendReturnRequestUploadFileReturnRequestPost(fileName, contentType, body, options).then((request) => request(this.axios, this.basePath));
    }
}
