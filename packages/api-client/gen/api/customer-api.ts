/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountActivationModelDto } from '../model';
// @ts-ignore
import { AddressAddResponse } from '../model';
// @ts-ignore
import { AddressEditResponse } from '../model';
// @ts-ignore
import { ChangePasswordModelDto } from '../model';
// @ts-ignore
import { CheckGiftCardBalanceModelDto } from '../model';
// @ts-ignore
import { CheckUsernameAvailabilityResponse } from '../model';
// @ts-ignore
import { CustomerAddressEditModelDto } from '../model';
// @ts-ignore
import { CustomerAddressEditModelDtoBaseModelDtoRequest } from '../model';
// @ts-ignore
import { CustomerAddressListModelDto } from '../model';
// @ts-ignore
import { CustomerAvatarModelDto } from '../model';
// @ts-ignore
import { CustomerDownloadableProductsModelDto } from '../model';
// @ts-ignore
import { CustomerInfoModelDto } from '../model';
// @ts-ignore
import { CustomerInfoModelDtoBaseModelDtoRequest } from '../model';
// @ts-ignore
import { EmailRevalidationModelDto } from '../model';
// @ts-ignore
import { GdprToolsModelDto } from '../model';
// @ts-ignore
import { InfoResponse } from '../model';
// @ts-ignore
import { PasswordRecoveryConfirmModelDto } from '../model';
// @ts-ignore
import { PasswordRecoveryModelDto } from '../model';
// @ts-ignore
import { RegisterModelDto } from '../model';
// @ts-ignore
import { RegisterModelDtoBaseModelDtoRequest } from '../model';
// @ts-ignore
import { RegisterResultModelDto } from '../model';
// @ts-ignore
import { UserAgreementModelDto } from '../model';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Account activation
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAccountActivationPost: async (token: string, email: string, customerGuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiFrontendCustomerAccountActivationPost', 'token', token)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiFrontendCustomerAccountActivationPost', 'email', email)
            // verify required parameter 'customerGuid' is not null or undefined
            assertParamExists('apiFrontendCustomerAccountActivationPost', 'customerGuid', customerGuid)
            const localVarPath = `/api-frontend/Customer/AccountActivation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (customerGuid !== undefined) {
                localVarQueryParameter['customerGuid'] = customerGuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare address model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressAddGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/AddressAdd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Address add
         * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressAddPost: async (customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/AddressAdd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAddressEditModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Address delete
         * @param {number} addressId Address identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressDeleteAddressIdDelete: async (addressId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiFrontendCustomerAddressDeleteAddressIdDelete', 'addressId', addressId)
            const localVarPath = `/api-frontend/Customer/AddressDelete/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare address model
         * @param {number} addressId Address identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressEditAddressIdGet: async (addressId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiFrontendCustomerAddressEditAddressIdGet', 'addressId', addressId)
            const localVarPath = `/api-frontend/Customer/AddressEdit/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update address
         * @param {number} addressId 
         * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressEditAddressIdPut: async (addressId: number, customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('apiFrontendCustomerAddressEditAddressIdPut', 'addressId', addressId)
            const localVarPath = `/api-frontend/Customer/AddressEdit/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAddressEditModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the customer address list model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/Addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the customer avatar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAvatarGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/Avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the change password model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerChangePasswordGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change password
         * @param {ChangePasswordModelDto} [changePasswordModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerChangePasswordPost: async (changePasswordModelDto?: ChangePasswordModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check GiftCard balance
         * @param {CheckGiftCardBalanceModelDto} [checkGiftCardBalanceModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerCheckBalancePost: async (checkGiftCardBalanceModelDto?: CheckGiftCardBalanceModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/CheckBalance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkGiftCardBalanceModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the check gift card balance madel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerCheckGiftCardBalanceGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/CheckGiftCardBalance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check Username availability
         * @param {string} username Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerCheckUsernameAvailabilityGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('apiFrontendCustomerCheckUsernameAvailabilityGet', 'username', username)
            const localVarPath = `/api-frontend/Customer/CheckUsernameAvailability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the customer downloadable products model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerDownloadableProductsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/DownloadableProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Email revalidation
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerEmailRevalidationPost: async (token: string, email: string, customerGuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiFrontendCustomerEmailRevalidationPost', 'token', token)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiFrontendCustomerEmailRevalidationPost', 'email', email)
            // verify required parameter 'customerGuid' is not null or undefined
            assertParamExists('apiFrontendCustomerEmailRevalidationPost', 'customerGuid', customerGuid)
            const localVarPath = `/api-frontend/Customer/EmailRevalidation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (customerGuid !== undefined) {
                localVarQueryParameter['customerGuid'] = customerGuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gdpr tools delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerGdprToolsDeleteDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/GdprToolsDelete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export customer info (GDPR request) to XLSX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerGdprToolsExportGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/GdprToolsExport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the GDPR tools model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerGdprToolsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/GdprTools`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the customer info model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/Info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Customer info
         * @param {CustomerInfoModelDtoBaseModelDtoRequest} [customerInfoModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerInfoPost: async (customerInfoModelDtoBaseModelDtoRequest?: CustomerInfoModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/Info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerInfoModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerLogoutGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Password recovery confirm post
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {PasswordRecoveryConfirmModelDto} [passwordRecoveryConfirmModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoveryConfirmPOSTPost: async (token: string, email: string, customerGuid: string, passwordRecoveryConfirmModelDto?: PasswordRecoveryConfirmModelDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiFrontendCustomerPasswordRecoveryConfirmPOSTPost', 'token', token)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiFrontendCustomerPasswordRecoveryConfirmPOSTPost', 'email', email)
            // verify required parameter 'customerGuid' is not null or undefined
            assertParamExists('apiFrontendCustomerPasswordRecoveryConfirmPOSTPost', 'customerGuid', customerGuid)
            const localVarPath = `/api-frontend/Customer/PasswordRecoveryConfirmPOST`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (customerGuid !== undefined) {
                localVarQueryParameter['customerGuid'] = customerGuid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordRecoveryConfirmModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Password recovery confirm
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoveryConfirmPost: async (token: string, email: string, customerGuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiFrontendCustomerPasswordRecoveryConfirmPost', 'token', token)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiFrontendCustomerPasswordRecoveryConfirmPost', 'email', email)
            // verify required parameter 'customerGuid' is not null or undefined
            assertParamExists('apiFrontendCustomerPasswordRecoveryConfirmPost', 'customerGuid', customerGuid)
            const localVarPath = `/api-frontend/Customer/PasswordRecoveryConfirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (customerGuid !== undefined) {
                localVarQueryParameter['customerGuid'] = customerGuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the password recovery model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoveryGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/PasswordRecovery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Password recovery send
         * @param {PasswordRecoveryModelDto} [passwordRecoveryModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoverySendPost: async (passwordRecoveryModelDto?: PasswordRecoveryModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/PasswordRecoverySend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordRecoveryModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the customer register model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRegisterGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {string} returnUrl 
         * @param {RegisterModelDtoBaseModelDtoRequest} [registerModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRegisterPost: async (returnUrl: string, registerModelDtoBaseModelDtoRequest?: RegisterModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'returnUrl' is not null or undefined
            assertParamExists('apiFrontendCustomerRegisterPost', 'returnUrl', returnUrl)
            const localVarPath = `/api-frontend/Customer/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the register result model
         * @param {number} resultId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRegisterResultResultIdPost: async (resultId: number, returnUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultId' is not null or undefined
            assertParamExists('apiFrontendCustomerRegisterResultResultIdPost', 'resultId', resultId)
            // verify required parameter 'returnUrl' is not null or undefined
            assertParamExists('apiFrontendCustomerRegisterResultResultIdPost', 'returnUrl', returnUrl)
            const localVarPath = `/api-frontend/Customer/RegisterResult/{resultId}`
                .replace(`{${"resultId"}}`, encodeURIComponent(String(resultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRemoveAvatarDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Customer/RemoveAvatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the external authentication record
         * @param {number} id External authentication record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRemoveExternalAssociationIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendCustomerRemoveExternalAssociationIdDelete', 'id', id)
            const localVarPath = `/api-frontend/Customer/RemoveExternalAssociation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload avatar
         * @param {string} fileName 
         * @param {string} contentType 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerUploadAvatarPost: async (fileName: string, contentType: string, body?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiFrontendCustomerUploadAvatarPost', 'fileName', fileName)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('apiFrontendCustomerUploadAvatarPost', 'contentType', contentType)
            const localVarPath = `/api-frontend/Customer/UploadAvatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['contentType'] = contentType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the user agreement model
         * @param {string} orderItemId Order item guid identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerUserAgreementGet: async (orderItemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderItemId' is not null or undefined
            assertParamExists('apiFrontendCustomerUserAgreementGet', 'orderItemId', orderItemId)
            const localVarPath = `/api-frontend/Customer/UserAgreement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (orderItemId !== undefined) {
                localVarQueryParameter['orderItemId'] = orderItemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Account activation
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAccountActivationPost(token: string, email: string, customerGuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountActivationModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAccountActivationPost(token, email, customerGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare address model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAddressAddGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressEditModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAddressAddGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Address add
         * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAddressAddPost(customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressAddResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAddressAddPost(customerAddressEditModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Address delete
         * @param {number} addressId Address identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAddressDeleteAddressIdDelete(addressId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAddressDeleteAddressIdDelete(addressId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare address model
         * @param {number} addressId Address identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAddressEditAddressIdGet(addressId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressEditModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAddressEditAddressIdGet(addressId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update address
         * @param {number} addressId 
         * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAddressEditAddressIdPut(addressId: number, customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressEditResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAddressEditAddressIdPut(addressId, customerAddressEditModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the customer address list model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAddressesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddressListModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAddressesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the customer avatar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerAvatarGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAvatarModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerAvatarGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the change password model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerChangePasswordGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangePasswordModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerChangePasswordGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change password
         * @param {ChangePasswordModelDto} [changePasswordModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerChangePasswordPost(changePasswordModelDto?: ChangePasswordModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangePasswordModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerChangePasswordPost(changePasswordModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check GiftCard balance
         * @param {CheckGiftCardBalanceModelDto} [checkGiftCardBalanceModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerCheckBalancePost(checkGiftCardBalanceModelDto?: CheckGiftCardBalanceModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckGiftCardBalanceModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerCheckBalancePost(checkGiftCardBalanceModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the check gift card balance madel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerCheckGiftCardBalanceGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckGiftCardBalanceModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerCheckGiftCardBalanceGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check Username availability
         * @param {string} username Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerCheckUsernameAvailabilityGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckUsernameAvailabilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerCheckUsernameAvailabilityGet(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the customer downloadable products model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerDownloadableProductsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDownloadableProductsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerDownloadableProductsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Email revalidation
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerEmailRevalidationPost(token: string, email: string, customerGuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailRevalidationModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerEmailRevalidationPost(token, email, customerGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gdpr tools delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerGdprToolsDeleteDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GdprToolsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerGdprToolsDeleteDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Export customer info (GDPR request) to XLSX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerGdprToolsExportGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerGdprToolsExportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the GDPR tools model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerGdprToolsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GdprToolsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerGdprToolsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the customer info model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerInfoModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Customer info
         * @param {CustomerInfoModelDtoBaseModelDtoRequest} [customerInfoModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerInfoPost(customerInfoModelDtoBaseModelDtoRequest?: CustomerInfoModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerInfoPost(customerInfoModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerLogoutGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerLogoutGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Password recovery confirm post
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {PasswordRecoveryConfirmModelDto} [passwordRecoveryConfirmModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerPasswordRecoveryConfirmPOSTPost(token: string, email: string, customerGuid: string, passwordRecoveryConfirmModelDto?: PasswordRecoveryConfirmModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordRecoveryConfirmModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerPasswordRecoveryConfirmPOSTPost(token, email, customerGuid, passwordRecoveryConfirmModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Password recovery confirm
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerPasswordRecoveryConfirmPost(token: string, email: string, customerGuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordRecoveryConfirmModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerPasswordRecoveryConfirmPost(token, email, customerGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the password recovery model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerPasswordRecoveryGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordRecoveryModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerPasswordRecoveryGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Password recovery send
         * @param {PasswordRecoveryModelDto} [passwordRecoveryModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerPasswordRecoverySendPost(passwordRecoveryModelDto?: PasswordRecoveryModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordRecoveryModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerPasswordRecoverySendPost(passwordRecoveryModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the customer register model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerRegisterGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerRegisterGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register
         * @param {string} returnUrl 
         * @param {RegisterModelDtoBaseModelDtoRequest} [registerModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerRegisterPost(returnUrl: string, registerModelDtoBaseModelDtoRequest?: RegisterModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerRegisterPost(returnUrl, registerModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the register result model
         * @param {number} resultId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerRegisterResultResultIdPost(resultId: number, returnUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResultModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerRegisterResultResultIdPost(resultId, returnUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerRemoveAvatarDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerRemoveAvatarDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the external authentication record
         * @param {number} id External authentication record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerRemoveExternalAssociationIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerRemoveExternalAssociationIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload avatar
         * @param {string} fileName 
         * @param {string} contentType 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerUploadAvatarPost(fileName: string, contentType: string, body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAvatarModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerUploadAvatarPost(fileName, contentType, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the user agreement model
         * @param {string} orderItemId Order item guid identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCustomerUserAgreementGet(orderItemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAgreementModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCustomerUserAgreementGet(orderItemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @summary Account activation
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAccountActivationPost(token: string, email: string, customerGuid: string, options?: any): AxiosPromise<AccountActivationModelDto> {
            return localVarFp.apiFrontendCustomerAccountActivationPost(token, email, customerGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare address model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressAddGet(options?: any): AxiosPromise<CustomerAddressEditModelDto> {
            return localVarFp.apiFrontendCustomerAddressAddGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Address add
         * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressAddPost(customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<AddressAddResponse> {
            return localVarFp.apiFrontendCustomerAddressAddPost(customerAddressEditModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Address delete
         * @param {number} addressId Address identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressDeleteAddressIdDelete(addressId: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendCustomerAddressDeleteAddressIdDelete(addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare address model
         * @param {number} addressId Address identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressEditAddressIdGet(addressId: number, options?: any): AxiosPromise<CustomerAddressEditModelDto> {
            return localVarFp.apiFrontendCustomerAddressEditAddressIdGet(addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update address
         * @param {number} addressId 
         * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressEditAddressIdPut(addressId: number, customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<AddressEditResponse> {
            return localVarFp.apiFrontendCustomerAddressEditAddressIdPut(addressId, customerAddressEditModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the customer address list model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAddressesGet(options?: any): AxiosPromise<CustomerAddressListModelDto> {
            return localVarFp.apiFrontendCustomerAddressesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the customer avatar model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerAvatarGet(options?: any): AxiosPromise<CustomerAvatarModelDto> {
            return localVarFp.apiFrontendCustomerAvatarGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the change password model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerChangePasswordGet(options?: any): AxiosPromise<ChangePasswordModelDto> {
            return localVarFp.apiFrontendCustomerChangePasswordGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change password
         * @param {ChangePasswordModelDto} [changePasswordModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerChangePasswordPost(changePasswordModelDto?: ChangePasswordModelDto, options?: any): AxiosPromise<ChangePasswordModelDto> {
            return localVarFp.apiFrontendCustomerChangePasswordPost(changePasswordModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check GiftCard balance
         * @param {CheckGiftCardBalanceModelDto} [checkGiftCardBalanceModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerCheckBalancePost(checkGiftCardBalanceModelDto?: CheckGiftCardBalanceModelDto, options?: any): AxiosPromise<CheckGiftCardBalanceModelDto> {
            return localVarFp.apiFrontendCustomerCheckBalancePost(checkGiftCardBalanceModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the check gift card balance madel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerCheckGiftCardBalanceGet(options?: any): AxiosPromise<CheckGiftCardBalanceModelDto> {
            return localVarFp.apiFrontendCustomerCheckGiftCardBalanceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check Username availability
         * @param {string} username Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerCheckUsernameAvailabilityGet(username: string, options?: any): AxiosPromise<CheckUsernameAvailabilityResponse> {
            return localVarFp.apiFrontendCustomerCheckUsernameAvailabilityGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the customer downloadable products model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerDownloadableProductsGet(options?: any): AxiosPromise<CustomerDownloadableProductsModelDto> {
            return localVarFp.apiFrontendCustomerDownloadableProductsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Email revalidation
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerEmailRevalidationPost(token: string, email: string, customerGuid: string, options?: any): AxiosPromise<EmailRevalidationModelDto> {
            return localVarFp.apiFrontendCustomerEmailRevalidationPost(token, email, customerGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gdpr tools delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerGdprToolsDeleteDelete(options?: any): AxiosPromise<GdprToolsModelDto> {
            return localVarFp.apiFrontendCustomerGdprToolsDeleteDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export customer info (GDPR request) to XLSX
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerGdprToolsExportGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendCustomerGdprToolsExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the GDPR tools model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerGdprToolsGet(options?: any): AxiosPromise<GdprToolsModelDto> {
            return localVarFp.apiFrontendCustomerGdprToolsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the customer info model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerInfoGet(options?: any): AxiosPromise<CustomerInfoModelDto> {
            return localVarFp.apiFrontendCustomerInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Customer info
         * @param {CustomerInfoModelDtoBaseModelDtoRequest} [customerInfoModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerInfoPost(customerInfoModelDtoBaseModelDtoRequest?: CustomerInfoModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<InfoResponse> {
            return localVarFp.apiFrontendCustomerInfoPost(customerInfoModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerLogoutGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendCustomerLogoutGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Password recovery confirm post
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {PasswordRecoveryConfirmModelDto} [passwordRecoveryConfirmModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoveryConfirmPOSTPost(token: string, email: string, customerGuid: string, passwordRecoveryConfirmModelDto?: PasswordRecoveryConfirmModelDto, options?: any): AxiosPromise<PasswordRecoveryConfirmModelDto> {
            return localVarFp.apiFrontendCustomerPasswordRecoveryConfirmPOSTPost(token, email, customerGuid, passwordRecoveryConfirmModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Password recovery confirm
         * @param {string} token 
         * @param {string} email 
         * @param {string} customerGuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoveryConfirmPost(token: string, email: string, customerGuid: string, options?: any): AxiosPromise<PasswordRecoveryConfirmModelDto> {
            return localVarFp.apiFrontendCustomerPasswordRecoveryConfirmPost(token, email, customerGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the password recovery model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoveryGet(options?: any): AxiosPromise<PasswordRecoveryModelDto> {
            return localVarFp.apiFrontendCustomerPasswordRecoveryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Password recovery send
         * @param {PasswordRecoveryModelDto} [passwordRecoveryModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerPasswordRecoverySendPost(passwordRecoveryModelDto?: PasswordRecoveryModelDto, options?: any): AxiosPromise<PasswordRecoveryModelDto> {
            return localVarFp.apiFrontendCustomerPasswordRecoverySendPost(passwordRecoveryModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the customer register model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRegisterGet(options?: any): AxiosPromise<RegisterModelDto> {
            return localVarFp.apiFrontendCustomerRegisterGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {string} returnUrl 
         * @param {RegisterModelDtoBaseModelDtoRequest} [registerModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRegisterPost(returnUrl: string, registerModelDtoBaseModelDtoRequest?: RegisterModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<RegisterModelDto> {
            return localVarFp.apiFrontendCustomerRegisterPost(returnUrl, registerModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the register result model
         * @param {number} resultId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRegisterResultResultIdPost(resultId: number, returnUrl: string, options?: any): AxiosPromise<RegisterResultModelDto> {
            return localVarFp.apiFrontendCustomerRegisterResultResultIdPost(resultId, returnUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRemoveAvatarDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendCustomerRemoveAvatarDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the external authentication record
         * @param {number} id External authentication record identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerRemoveExternalAssociationIdDelete(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendCustomerRemoveExternalAssociationIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload avatar
         * @param {string} fileName 
         * @param {string} contentType 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerUploadAvatarPost(fileName: string, contentType: string, body?: string, options?: any): AxiosPromise<CustomerAvatarModelDto> {
            return localVarFp.apiFrontendCustomerUploadAvatarPost(fileName, contentType, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the user agreement model
         * @param {string} orderItemId Order item guid identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCustomerUserAgreementGet(orderItemId: string, options?: any): AxiosPromise<UserAgreementModelDto> {
            return localVarFp.apiFrontendCustomerUserAgreementGet(orderItemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @summary Account activation
     * @param {string} token 
     * @param {string} email 
     * @param {string} customerGuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAccountActivationPost(token: string, email: string, customerGuid: string, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAccountActivationPost(token, email, customerGuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare address model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAddressAddGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAddressAddGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Address add
     * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAddressAddPost(customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAddressAddPost(customerAddressEditModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Address delete
     * @param {number} addressId Address identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAddressDeleteAddressIdDelete(addressId: number, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAddressDeleteAddressIdDelete(addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare address model
     * @param {number} addressId Address identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAddressEditAddressIdGet(addressId: number, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAddressEditAddressIdGet(addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update address
     * @param {number} addressId 
     * @param {CustomerAddressEditModelDtoBaseModelDtoRequest} [customerAddressEditModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAddressEditAddressIdPut(addressId: number, customerAddressEditModelDtoBaseModelDtoRequest?: CustomerAddressEditModelDtoBaseModelDtoRequest, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAddressEditAddressIdPut(addressId, customerAddressEditModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the customer address list model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAddressesGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAddressesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the customer avatar model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerAvatarGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerAvatarGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the change password model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerChangePasswordGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerChangePasswordGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change password
     * @param {ChangePasswordModelDto} [changePasswordModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerChangePasswordPost(changePasswordModelDto?: ChangePasswordModelDto, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerChangePasswordPost(changePasswordModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check GiftCard balance
     * @param {CheckGiftCardBalanceModelDto} [checkGiftCardBalanceModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerCheckBalancePost(checkGiftCardBalanceModelDto?: CheckGiftCardBalanceModelDto, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerCheckBalancePost(checkGiftCardBalanceModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the check gift card balance madel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerCheckGiftCardBalanceGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerCheckGiftCardBalanceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check Username availability
     * @param {string} username Username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerCheckUsernameAvailabilityGet(username: string, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerCheckUsernameAvailabilityGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the customer downloadable products model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerDownloadableProductsGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerDownloadableProductsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Email revalidation
     * @param {string} token 
     * @param {string} email 
     * @param {string} customerGuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerEmailRevalidationPost(token: string, email: string, customerGuid: string, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerEmailRevalidationPost(token, email, customerGuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gdpr tools delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerGdprToolsDeleteDelete(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerGdprToolsDeleteDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export customer info (GDPR request) to XLSX
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerGdprToolsExportGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerGdprToolsExportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the GDPR tools model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerGdprToolsGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerGdprToolsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the customer info model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerInfoGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Customer info
     * @param {CustomerInfoModelDtoBaseModelDtoRequest} [customerInfoModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerInfoPost(customerInfoModelDtoBaseModelDtoRequest?: CustomerInfoModelDtoBaseModelDtoRequest, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerInfoPost(customerInfoModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerLogoutGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerLogoutGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Password recovery confirm post
     * @param {string} token 
     * @param {string} email 
     * @param {string} customerGuid 
     * @param {PasswordRecoveryConfirmModelDto} [passwordRecoveryConfirmModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerPasswordRecoveryConfirmPOSTPost(token: string, email: string, customerGuid: string, passwordRecoveryConfirmModelDto?: PasswordRecoveryConfirmModelDto, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerPasswordRecoveryConfirmPOSTPost(token, email, customerGuid, passwordRecoveryConfirmModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Password recovery confirm
     * @param {string} token 
     * @param {string} email 
     * @param {string} customerGuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerPasswordRecoveryConfirmPost(token: string, email: string, customerGuid: string, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerPasswordRecoveryConfirmPost(token, email, customerGuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the password recovery model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerPasswordRecoveryGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerPasswordRecoveryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Password recovery send
     * @param {PasswordRecoveryModelDto} [passwordRecoveryModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerPasswordRecoverySendPost(passwordRecoveryModelDto?: PasswordRecoveryModelDto, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerPasswordRecoverySendPost(passwordRecoveryModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the customer register model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerRegisterGet(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerRegisterGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {string} returnUrl 
     * @param {RegisterModelDtoBaseModelDtoRequest} [registerModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerRegisterPost(returnUrl: string, registerModelDtoBaseModelDtoRequest?: RegisterModelDtoBaseModelDtoRequest, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerRegisterPost(returnUrl, registerModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the register result model
     * @param {number} resultId 
     * @param {string} returnUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerRegisterResultResultIdPost(resultId: number, returnUrl: string, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerRegisterResultResultIdPost(resultId, returnUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerRemoveAvatarDelete(options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerRemoveAvatarDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the external authentication record
     * @param {number} id External authentication record identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerRemoveExternalAssociationIdDelete(id: number, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerRemoveExternalAssociationIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload avatar
     * @param {string} fileName 
     * @param {string} contentType 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerUploadAvatarPost(fileName: string, contentType: string, body?: string, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerUploadAvatarPost(fileName, contentType, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the user agreement model
     * @param {string} orderItemId Order item guid identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiFrontendCustomerUserAgreementGet(orderItemId: string, options?: any) {
        return CustomerApiFp(this.configuration).apiFrontendCustomerUserAgreementGet(orderItemId, options).then((request) => request(this.axios, this.basePath));
    }
}
