/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BlogPagingFilteringModelDto } from '../model';
// @ts-ignore
import { BlogPostListModelDto } from '../model';
// @ts-ignore
import { BlogPostModelDto } from '../model';
/**
 * BlogApi - axios parameter creator
 * @export
 */
export const BlogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogBlogByMonthPost: async (blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Blog/BlogByMonth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogPagingFilteringModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogBlogByTagPost: async (blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Blog/BlogByTag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogPagingFilteringModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} blogPostId 
         * @param {BlogPostModelDto} [blogPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogBlogCommentAddBlogPostIdPost: async (blogPostId: number, blogPostModelDto?: BlogPostModelDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogPostId' is not null or undefined
            assertParamExists('apiFrontendBlogBlogCommentAddBlogPostIdPost', 'blogPostId', blogPostId)
            const localVarPath = `/api-frontend/Blog/BlogCommentAdd/{blogPostId}`
                .replace(`{${"blogPostId"}}`, encodeURIComponent(String(blogPostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogPostModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} blogPostId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogGetBlogPostBlogPostIdGet: async (blogPostId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogPostId' is not null or undefined
            assertParamExists('apiFrontendBlogGetBlogPostBlogPostIdGet', 'blogPostId', blogPostId)
            const localVarPath = `/api-frontend/Blog/GetBlogPost/{blogPostId}`
                .replace(`{${"blogPostId"}}`, encodeURIComponent(String(blogPostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogListPost: async (blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Blog/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogPagingFilteringModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} languageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogListRssLanguageIdGet: async (languageId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'languageId' is not null or undefined
            assertParamExists('apiFrontendBlogListRssLanguageIdGet', 'languageId', languageId)
            const localVarPath = `/api-frontend/Blog/ListRss/{languageId}`
                .replace(`{${"languageId"}}`, encodeURIComponent(String(languageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogApi - functional programming interface
 * @export
 */
export const BlogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBlogBlogByMonthPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostListModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBlogBlogByMonthPost(blogPagingFilteringModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBlogBlogByTagPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostListModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBlogBlogByTagPost(blogPagingFilteringModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} blogPostId 
         * @param {BlogPostModelDto} [blogPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBlogBlogCommentAddBlogPostIdPost(blogPostId: number, blogPostModelDto?: BlogPostModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBlogBlogCommentAddBlogPostIdPost(blogPostId, blogPostModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} blogPostId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBlogGetBlogPostBlogPostIdGet(blogPostId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBlogGetBlogPostBlogPostIdGet(blogPostId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBlogListPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostListModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBlogListPost(blogPagingFilteringModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} languageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBlogListRssLanguageIdGet(languageId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBlogListRssLanguageIdGet(languageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogApi - factory interface
 * @export
 */
export const BlogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogApiFp(configuration)
    return {
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogBlogByMonthPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any): AxiosPromise<BlogPostListModelDto> {
            return localVarFp.apiFrontendBlogBlogByMonthPost(blogPagingFilteringModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogBlogByTagPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any): AxiosPromise<BlogPostListModelDto> {
            return localVarFp.apiFrontendBlogBlogByTagPost(blogPagingFilteringModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} blogPostId 
         * @param {BlogPostModelDto} [blogPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogBlogCommentAddBlogPostIdPost(blogPostId: number, blogPostModelDto?: BlogPostModelDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendBlogBlogCommentAddBlogPostIdPost(blogPostId, blogPostModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} blogPostId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogGetBlogPostBlogPostIdGet(blogPostId: number, options?: any): AxiosPromise<BlogPostModelDto> {
            return localVarFp.apiFrontendBlogGetBlogPostBlogPostIdGet(blogPostId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogListPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any): AxiosPromise<BlogPostListModelDto> {
            return localVarFp.apiFrontendBlogListPost(blogPagingFilteringModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} languageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBlogListRssLanguageIdGet(languageId: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendBlogListRssLanguageIdGet(languageId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogApi - object-oriented interface
 * @export
 * @class BlogApi
 * @extends {BaseAPI}
 */
export class BlogApi extends BaseAPI {
    /**
     * 
     * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public apiFrontendBlogBlogByMonthPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any) {
        return BlogApiFp(this.configuration).apiFrontendBlogBlogByMonthPost(blogPagingFilteringModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public apiFrontendBlogBlogByTagPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any) {
        return BlogApiFp(this.configuration).apiFrontendBlogBlogByTagPost(blogPagingFilteringModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} blogPostId 
     * @param {BlogPostModelDto} [blogPostModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public apiFrontendBlogBlogCommentAddBlogPostIdPost(blogPostId: number, blogPostModelDto?: BlogPostModelDto, options?: any) {
        return BlogApiFp(this.configuration).apiFrontendBlogBlogCommentAddBlogPostIdPost(blogPostId, blogPostModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} blogPostId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public apiFrontendBlogGetBlogPostBlogPostIdGet(blogPostId: number, options?: any) {
        return BlogApiFp(this.configuration).apiFrontendBlogGetBlogPostBlogPostIdGet(blogPostId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPagingFilteringModelDto} [blogPagingFilteringModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public apiFrontendBlogListPost(blogPagingFilteringModelDto?: BlogPagingFilteringModelDto, options?: any) {
        return BlogApiFp(this.configuration).apiFrontendBlogListPost(blogPagingFilteringModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} languageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public apiFrontendBlogListRssLanguageIdGet(languageId: number, options?: any) {
        return BlogApiFp(this.configuration).apiFrontendBlogListRssLanguageIdGet(languageId, options).then((request) => request(this.axios, this.basePath));
    }
}
