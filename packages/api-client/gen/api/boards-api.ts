/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActiveDiscussionsModelDto } from '../model';
// @ts-ignore
import { BoardsIndexModelDto } from '../model';
// @ts-ignore
import { CustomerForumSubscriptionsModelDto } from '../model';
// @ts-ignore
import { EditForumPostModelDto } from '../model';
// @ts-ignore
import { EditForumTopicModelDto } from '../model';
// @ts-ignore
import { ForumGroupModelDto } from '../model';
// @ts-ignore
import { ForumPageModelDto } from '../model';
// @ts-ignore
import { ForumTopicPageModelDto } from '../model';
// @ts-ignore
import { ForumWatchResponse } from '../model';
// @ts-ignore
import { PostVoteResponse } from '../model';
// @ts-ignore
import { SearchBoardsModelDto } from '../model';
// @ts-ignore
import { TopicMoveModelDto } from '../model';
// @ts-ignore
import { TopicWatchResponse } from '../model';
/**
 * BoardsApi - axios parameter creator
 * @export
 */
export const BoardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Active discussions
         * @param {number} [forumId] Forum identifier
         * @param {number} [pageNumber] Number of forum topics page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsActiveDiscussionsGet: async (forumId?: number, pageNumber?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/ActiveDiscussions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (forumId !== undefined) {
                localVarQueryParameter['forumId'] = forumId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Active discussions RSS
         * @param {number} [forumId] Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsActiveDiscussionsRssGet: async (forumId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/ActiveDiscussionsRss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (forumId !== undefined) {
                localVarQueryParameter['forumId'] = forumId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the customer forum subscriptions model
         * @param {number} [pageNumber] Number of items page; pass null to load the first page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsCustomerForumSubscriptionsGet: async (pageNumber?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/CustomerForumSubscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Customer forum subscriptions POST
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsCustomerForumSubscriptionsPOSTPost: async (requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/CustomerForumSubscriptionsPOST`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a forum group
         * @param {number} id The forum group identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumGroupIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsForumGroupIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/ForumGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get forum page
         * @param {number} id Forum identifier
         * @param {number} [pageNumber] Number of forum page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumIdGet: async (id: number, pageNumber?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsForumIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/Forum/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forum RSS
         * @param {number} id Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumRssIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsForumRssIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/ForumRss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forum watch
         * @param {number} id Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumWatchIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsForumWatchIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/ForumWatch/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsIndexGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/Index`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare forum post model
         * @param {number} id Forum topic identifier
         * @param {string} quote 
         * @param {number} [quoteId] Identifier of the quoted post; pass 0 to load the empty text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostCreateIdQuoteGet: async (id: number, quote: string, quoteId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsPostCreateIdQuoteGet', 'id', id)
            // verify required parameter 'quote' is not null or undefined
            assertParamExists('apiFrontendBoardsPostCreateIdQuoteGet', 'quote', quote)
            const localVarPath = `/api-frontend/Boards/PostCreate/{id}/{quote}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"quote"}}`, encodeURIComponent(String(quote)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (quoteId !== undefined) {
                localVarQueryParameter['quoteId'] = quoteId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create forum post
         * @param {EditForumPostModelDto} [editForumPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostCreatePost: async (editForumPostModelDto?: EditForumPostModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/PostCreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editForumPostModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the forum post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostDeleteIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsPostDeleteIdDelete', 'id', id)
            const localVarPath = `/api-frontend/Boards/PostDelete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the forum post edit model
         * @param {number} id The forum post identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostEditIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsPostEditIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/PostEdit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit forum post
         * @param {EditForumPostModelDto} [editForumPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostEditPost: async (editForumPostModelDto?: EditForumPostModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/PostEdit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editForumPostModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POst vote
         * @param {number} postId Post identifier
         * @param {boolean} isUp Is up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostVotePostIdGet: async (postId: number, isUp: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('apiFrontendBoardsPostVotePostIdGet', 'postId', postId)
            // verify required parameter 'isUp' is not null or undefined
            assertParamExists('apiFrontendBoardsPostVotePostIdGet', 'isUp', isUp)
            const localVarPath = `/api-frontend/Boards/PostVote/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isUp !== undefined) {
                localVarQueryParameter['isUp'] = isUp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search terms in forum post
         * @param {string} searchTerms Search terms
         * @param {string} forumId Forum identifier
         * @param {string} within String representation of int value of ForumSearchType
         * @param {string} limitDays Limit by the last number days; 0 to load all topics
         * @param {number} page Number of items page
         * @param {boolean} [advs] Whether to use the advanced search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsSearchForumIdGet: async (searchTerms: string, forumId: string, within: string, limitDays: string, page: number, advs?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchTerms' is not null or undefined
            assertParamExists('apiFrontendBoardsSearchForumIdGet', 'searchTerms', searchTerms)
            // verify required parameter 'forumId' is not null or undefined
            assertParamExists('apiFrontendBoardsSearchForumIdGet', 'forumId', forumId)
            // verify required parameter 'within' is not null or undefined
            assertParamExists('apiFrontendBoardsSearchForumIdGet', 'within', within)
            // verify required parameter 'limitDays' is not null or undefined
            assertParamExists('apiFrontendBoardsSearchForumIdGet', 'limitDays', limitDays)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('apiFrontendBoardsSearchForumIdGet', 'page', page)
            const localVarPath = `/api-frontend/Boards/Search/{forumId}`
                .replace(`{${"forumId"}}`, encodeURIComponent(String(forumId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerms !== undefined) {
                localVarQueryParameter['searchTerms'] = searchTerms;
            }

            if (advs !== undefined) {
                localVarQueryParameter['advs'] = advs;
            }

            if (within !== undefined) {
                localVarQueryParameter['within'] = within;
            }

            if (limitDays !== undefined) {
                localVarQueryParameter['limitDays'] = limitDays;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prepare the forum topic create model
         * @param {number} id The forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicCreateIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsTopicCreateIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/TopicCreate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Topic create
         * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicCreatePost: async (editForumTopicModelDto?: EditForumTopicModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/TopicCreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editForumTopicModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Topic delete
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicDeleteIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsTopicDeleteIdDelete', 'id', id)
            const localVarPath = `/api-frontend/Boards/TopicDelete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit the forum topic
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicEditIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsTopicEditIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/TopicEdit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit the forum topic
         * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicEditPost: async (editForumTopicModelDto?: EditForumTopicModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Boards/TopicEdit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editForumTopicModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get topic page
         * @param {number} id Topic identifier
         * @param {number} [pageNumber] Number of topic page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicIdGet: async (id: number, pageNumber?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsTopicIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/Topic/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get topic move model
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicMoveIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsTopicMoveIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/TopicMove/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Topic watch
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicWatchIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendBoardsTopicWatchIdGet', 'id', id)
            const localVarPath = `/api-frontend/Boards/TopicWatch/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BoardsApi - functional programming interface
 * @export
 */
export const BoardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Active discussions
         * @param {number} [forumId] Forum identifier
         * @param {number} [pageNumber] Number of forum topics page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsActiveDiscussionsGet(forumId?: number, pageNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActiveDiscussionsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsActiveDiscussionsGet(forumId, pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Active discussions RSS
         * @param {number} [forumId] Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsActiveDiscussionsRssGet(forumId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsActiveDiscussionsRssGet(forumId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the customer forum subscriptions model
         * @param {number} [pageNumber] Number of items page; pass null to load the first page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsCustomerForumSubscriptionsGet(pageNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerForumSubscriptionsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsCustomerForumSubscriptionsGet(pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Customer forum subscriptions POST
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsCustomerForumSubscriptionsPOSTPost(requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerForumSubscriptionsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsCustomerForumSubscriptionsPOSTPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a forum group
         * @param {number} id The forum group identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsForumGroupIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumGroupModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsForumGroupIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get forum page
         * @param {number} id Forum identifier
         * @param {number} [pageNumber] Number of forum page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsForumIdGet(id: number, pageNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumPageModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsForumIdGet(id, pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Forum RSS
         * @param {number} id Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsForumRssIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsForumRssIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Forum watch
         * @param {number} id Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsForumWatchIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumWatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsForumWatchIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsIndexGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardsIndexModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsIndexGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare forum post model
         * @param {number} id Forum topic identifier
         * @param {string} quote 
         * @param {number} [quoteId] Identifier of the quoted post; pass 0 to load the empty text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsPostCreateIdQuoteGet(id: number, quote: string, quoteId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumPostModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsPostCreateIdQuoteGet(id, quote, quoteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create forum post
         * @param {EditForumPostModelDto} [editForumPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsPostCreatePost(editForumPostModelDto?: EditForumPostModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumPostModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsPostCreatePost(editForumPostModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the forum post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsPostDeleteIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumTopicModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsPostDeleteIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the forum post edit model
         * @param {number} id The forum post identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsPostEditIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumPostModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsPostEditIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit forum post
         * @param {EditForumPostModelDto} [editForumPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsPostEditPost(editForumPostModelDto?: EditForumPostModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumPostModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsPostEditPost(editForumPostModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POst vote
         * @param {number} postId Post identifier
         * @param {boolean} isUp Is up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsPostVotePostIdGet(postId: number, isUp: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostVoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsPostVotePostIdGet(postId, isUp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search terms in forum post
         * @param {string} searchTerms Search terms
         * @param {string} forumId Forum identifier
         * @param {string} within String representation of int value of ForumSearchType
         * @param {string} limitDays Limit by the last number days; 0 to load all topics
         * @param {number} page Number of items page
         * @param {boolean} [advs] Whether to use the advanced search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsSearchForumIdGet(searchTerms: string, forumId: string, within: string, limitDays: string, page: number, advs?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchBoardsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsSearchForumIdGet(searchTerms, forumId, within, limitDays, page, advs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Prepare the forum topic create model
         * @param {number} id The forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicCreateIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumTopicModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicCreateIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Topic create
         * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicCreatePost(editForumTopicModelDto?: EditForumTopicModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumTopicModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicCreatePost(editForumTopicModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Topic delete
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicDeleteIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicDeleteIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit the forum topic
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicEditIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumTopicModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicEditIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Edit the forum topic
         * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicEditPost(editForumTopicModelDto?: EditForumTopicModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditForumTopicModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicEditPost(editForumTopicModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get topic page
         * @param {number} id Topic identifier
         * @param {number} [pageNumber] Number of topic page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicIdGet(id: number, pageNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForumTopicPageModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicIdGet(id, pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get topic move model
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicMoveIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicMoveModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicMoveIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Topic watch
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBoardsTopicWatchIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicWatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBoardsTopicWatchIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BoardsApi - factory interface
 * @export
 */
export const BoardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BoardsApiFp(configuration)
    return {
        /**
         * 
         * @summary Active discussions
         * @param {number} [forumId] Forum identifier
         * @param {number} [pageNumber] Number of forum topics page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsActiveDiscussionsGet(forumId?: number, pageNumber?: number, options?: any): AxiosPromise<ActiveDiscussionsModelDto> {
            return localVarFp.apiFrontendBoardsActiveDiscussionsGet(forumId, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Active discussions RSS
         * @param {number} [forumId] Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsActiveDiscussionsRssGet(forumId?: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendBoardsActiveDiscussionsRssGet(forumId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the customer forum subscriptions model
         * @param {number} [pageNumber] Number of items page; pass null to load the first page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsCustomerForumSubscriptionsGet(pageNumber?: number, options?: any): AxiosPromise<CustomerForumSubscriptionsModelDto> {
            return localVarFp.apiFrontendBoardsCustomerForumSubscriptionsGet(pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Customer forum subscriptions POST
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsCustomerForumSubscriptionsPOSTPost(requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<CustomerForumSubscriptionsModelDto> {
            return localVarFp.apiFrontendBoardsCustomerForumSubscriptionsPOSTPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a forum group
         * @param {number} id The forum group identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumGroupIdGet(id: number, options?: any): AxiosPromise<ForumGroupModelDto> {
            return localVarFp.apiFrontendBoardsForumGroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get forum page
         * @param {number} id Forum identifier
         * @param {number} [pageNumber] Number of forum page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumIdGet(id: number, pageNumber?: number, options?: any): AxiosPromise<ForumPageModelDto> {
            return localVarFp.apiFrontendBoardsForumIdGet(id, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forum RSS
         * @param {number} id Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumRssIdGet(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendBoardsForumRssIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forum watch
         * @param {number} id Forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsForumWatchIdGet(id: number, options?: any): AxiosPromise<ForumWatchResponse> {
            return localVarFp.apiFrontendBoardsForumWatchIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsIndexGet(options?: any): AxiosPromise<BoardsIndexModelDto> {
            return localVarFp.apiFrontendBoardsIndexGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare forum post model
         * @param {number} id Forum topic identifier
         * @param {string} quote 
         * @param {number} [quoteId] Identifier of the quoted post; pass 0 to load the empty text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostCreateIdQuoteGet(id: number, quote: string, quoteId?: number, options?: any): AxiosPromise<EditForumPostModelDto> {
            return localVarFp.apiFrontendBoardsPostCreateIdQuoteGet(id, quote, quoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create forum post
         * @param {EditForumPostModelDto} [editForumPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostCreatePost(editForumPostModelDto?: EditForumPostModelDto, options?: any): AxiosPromise<EditForumPostModelDto> {
            return localVarFp.apiFrontendBoardsPostCreatePost(editForumPostModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the forum post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostDeleteIdDelete(id: number, options?: any): AxiosPromise<EditForumTopicModelDto> {
            return localVarFp.apiFrontendBoardsPostDeleteIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the forum post edit model
         * @param {number} id The forum post identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostEditIdGet(id: number, options?: any): AxiosPromise<EditForumPostModelDto> {
            return localVarFp.apiFrontendBoardsPostEditIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit forum post
         * @param {EditForumPostModelDto} [editForumPostModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostEditPost(editForumPostModelDto?: EditForumPostModelDto, options?: any): AxiosPromise<EditForumPostModelDto> {
            return localVarFp.apiFrontendBoardsPostEditPost(editForumPostModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POst vote
         * @param {number} postId Post identifier
         * @param {boolean} isUp Is up
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsPostVotePostIdGet(postId: number, isUp: boolean, options?: any): AxiosPromise<PostVoteResponse> {
            return localVarFp.apiFrontendBoardsPostVotePostIdGet(postId, isUp, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search terms in forum post
         * @param {string} searchTerms Search terms
         * @param {string} forumId Forum identifier
         * @param {string} within String representation of int value of ForumSearchType
         * @param {string} limitDays Limit by the last number days; 0 to load all topics
         * @param {number} page Number of items page
         * @param {boolean} [advs] Whether to use the advanced search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsSearchForumIdGet(searchTerms: string, forumId: string, within: string, limitDays: string, page: number, advs?: boolean, options?: any): AxiosPromise<SearchBoardsModelDto> {
            return localVarFp.apiFrontendBoardsSearchForumIdGet(searchTerms, forumId, within, limitDays, page, advs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prepare the forum topic create model
         * @param {number} id The forum identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicCreateIdGet(id: number, options?: any): AxiosPromise<EditForumTopicModelDto> {
            return localVarFp.apiFrontendBoardsTopicCreateIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Topic create
         * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicCreatePost(editForumTopicModelDto?: EditForumTopicModelDto, options?: any): AxiosPromise<EditForumTopicModelDto> {
            return localVarFp.apiFrontendBoardsTopicCreatePost(editForumTopicModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Topic delete
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicDeleteIdDelete(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendBoardsTopicDeleteIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit the forum topic
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicEditIdGet(id: number, options?: any): AxiosPromise<EditForumTopicModelDto> {
            return localVarFp.apiFrontendBoardsTopicEditIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit the forum topic
         * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicEditPost(editForumTopicModelDto?: EditForumTopicModelDto, options?: any): AxiosPromise<EditForumTopicModelDto> {
            return localVarFp.apiFrontendBoardsTopicEditPost(editForumTopicModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get topic page
         * @param {number} id Topic identifier
         * @param {number} [pageNumber] Number of topic page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicIdGet(id: number, pageNumber?: number, options?: any): AxiosPromise<ForumTopicPageModelDto> {
            return localVarFp.apiFrontendBoardsTopicIdGet(id, pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get topic move model
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicMoveIdGet(id: number, options?: any): AxiosPromise<TopicMoveModelDto> {
            return localVarFp.apiFrontendBoardsTopicMoveIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Topic watch
         * @param {number} id Topic identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBoardsTopicWatchIdGet(id: number, options?: any): AxiosPromise<TopicWatchResponse> {
            return localVarFp.apiFrontendBoardsTopicWatchIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BoardsApi - object-oriented interface
 * @export
 * @class BoardsApi
 * @extends {BaseAPI}
 */
export class BoardsApi extends BaseAPI {
    /**
     * 
     * @summary Active discussions
     * @param {number} [forumId] Forum identifier
     * @param {number} [pageNumber] Number of forum topics page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsActiveDiscussionsGet(forumId?: number, pageNumber?: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsActiveDiscussionsGet(forumId, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Active discussions RSS
     * @param {number} [forumId] Forum identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsActiveDiscussionsRssGet(forumId?: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsActiveDiscussionsRssGet(forumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the customer forum subscriptions model
     * @param {number} [pageNumber] Number of items page; pass null to load the first page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsCustomerForumSubscriptionsGet(pageNumber?: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsCustomerForumSubscriptionsGet(pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Customer forum subscriptions POST
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsCustomerForumSubscriptionsPOSTPost(requestBody?: { [key: string]: string; }, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsCustomerForumSubscriptionsPOSTPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a forum group
     * @param {number} id The forum group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsForumGroupIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsForumGroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get forum page
     * @param {number} id Forum identifier
     * @param {number} [pageNumber] Number of forum page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsForumIdGet(id: number, pageNumber?: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsForumIdGet(id, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Forum RSS
     * @param {number} id Forum identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsForumRssIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsForumRssIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Forum watch
     * @param {number} id Forum identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsForumWatchIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsForumWatchIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsIndexGet(options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsIndexGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare forum post model
     * @param {number} id Forum topic identifier
     * @param {string} quote 
     * @param {number} [quoteId] Identifier of the quoted post; pass 0 to load the empty text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsPostCreateIdQuoteGet(id: number, quote: string, quoteId?: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsPostCreateIdQuoteGet(id, quote, quoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create forum post
     * @param {EditForumPostModelDto} [editForumPostModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsPostCreatePost(editForumPostModelDto?: EditForumPostModelDto, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsPostCreatePost(editForumPostModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the forum post
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsPostDeleteIdDelete(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsPostDeleteIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the forum post edit model
     * @param {number} id The forum post identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsPostEditIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsPostEditIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit forum post
     * @param {EditForumPostModelDto} [editForumPostModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsPostEditPost(editForumPostModelDto?: EditForumPostModelDto, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsPostEditPost(editForumPostModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POst vote
     * @param {number} postId Post identifier
     * @param {boolean} isUp Is up
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsPostVotePostIdGet(postId: number, isUp: boolean, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsPostVotePostIdGet(postId, isUp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search terms in forum post
     * @param {string} searchTerms Search terms
     * @param {string} forumId Forum identifier
     * @param {string} within String representation of int value of ForumSearchType
     * @param {string} limitDays Limit by the last number days; 0 to load all topics
     * @param {number} page Number of items page
     * @param {boolean} [advs] Whether to use the advanced search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsSearchForumIdGet(searchTerms: string, forumId: string, within: string, limitDays: string, page: number, advs?: boolean, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsSearchForumIdGet(searchTerms, forumId, within, limitDays, page, advs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prepare the forum topic create model
     * @param {number} id The forum identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicCreateIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicCreateIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Topic create
     * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicCreatePost(editForumTopicModelDto?: EditForumTopicModelDto, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicCreatePost(editForumTopicModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Topic delete
     * @param {number} id Topic identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicDeleteIdDelete(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicDeleteIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit the forum topic
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicEditIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicEditIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit the forum topic
     * @param {EditForumTopicModelDto} [editForumTopicModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicEditPost(editForumTopicModelDto?: EditForumTopicModelDto, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicEditPost(editForumTopicModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get topic page
     * @param {number} id Topic identifier
     * @param {number} [pageNumber] Number of topic page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicIdGet(id: number, pageNumber?: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicIdGet(id, pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get topic move model
     * @param {number} id Topic identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicMoveIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicMoveIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Topic watch
     * @param {number} id Topic identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public apiFrontendBoardsTopicWatchIdGet(id: number, options?: any) {
        return BoardsApiFp(this.configuration).apiFrontendBoardsTopicWatchIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
