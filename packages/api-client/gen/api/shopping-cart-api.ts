/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddProductToCartResponse } from '../model';
// @ts-ignore
import { CheckoutAttributeChangeResponse } from '../model';
// @ts-ignore
import { EstimateShippingModelDtoBaseModelDtoRequest } from '../model';
// @ts-ignore
import { EstimateShippingResultModelDto } from '../model';
// @ts-ignore
import { MiniShoppingCartModelDto } from '../model';
// @ts-ignore
import { ProblemDetails } from '../model';
// @ts-ignore
import { ProductDetailsAttributeChangeResponse } from '../model';
// @ts-ignore
import { SelectShippingOptionResponse } from '../model';
// @ts-ignore
import { ShoppingCartModelDto } from '../model';
// @ts-ignore
import { ShoppingCartType } from '../model';
// @ts-ignore
import { UploadFileCheckoutAttributeResponse } from '../model';
// @ts-ignore
import { UploadFileProductAttributeResponse } from '../model';
/**
 * ShoppingCartApi - axios parameter creator
 * @export
 */
export const ShoppingCartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} productId 
         * @param {ShoppingCartType} shoppingCartType 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost: async (productId: number, shoppingCartType: ShoppingCartType, quantity: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost', 'productId', productId)
            // verify required parameter 'shoppingCartType' is not null or undefined
            assertParamExists('apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost', 'shoppingCartType', shoppingCartType)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost', 'quantity', quantity)
            const localVarPath = `/api-frontend/ShoppingCart/AddProductToCartFromCatalog/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (shoppingCartType !== undefined) {
                localVarQueryParameter['shoppingCartType'] = shoppingCartType;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {ShoppingCartType} shoppingCartType 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost: async (productId: number, shoppingCartType: ShoppingCartType, requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost', 'productId', productId)
            // verify required parameter 'shoppingCartType' is not null or undefined
            assertParamExists('apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost', 'shoppingCartType', shoppingCartType)
            const localVarPath = `/api-frontend/ShoppingCart/AddProductToCartFromDetails/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (shoppingCartType !== undefined) {
                localVarQueryParameter['shoppingCartType'] = shoppingCartType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} discountCouponCode 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartApplyDiscountCouponPost: async (discountCouponCode: string, requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'discountCouponCode' is not null or undefined
            assertParamExists('apiFrontendShoppingCartApplyDiscountCouponPost', 'discountCouponCode', discountCouponCode)
            const localVarPath = `/api-frontend/ShoppingCart/ApplyDiscountCoupon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (discountCouponCode !== undefined) {
                localVarQueryParameter['discountCouponCode'] = discountCouponCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} giftCardCouponCode 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartApplyGiftCardPost: async (giftCardCouponCode: string, requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'giftCardCouponCode' is not null or undefined
            assertParamExists('apiFrontendShoppingCartApplyGiftCardPost', 'giftCardCouponCode', giftCardCouponCode)
            const localVarPath = `/api-frontend/ShoppingCart/ApplyGiftCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (giftCardCouponCode !== undefined) {
                localVarQueryParameter['giftCardCouponCode'] = giftCardCouponCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartCartGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ShoppingCart/Cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartCheckoutAttributeChangePost: async (requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ShoppingCart/CheckoutAttributeChange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartGetEstimateShippingPost: async (estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ShoppingCart/GetEstimateShipping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(estimateShippingModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartMiniCartGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ShoppingCart/MiniCart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {boolean} validateAttributeConditions 
         * @param {boolean} loadPicture 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut: async (productId: number, validateAttributeConditions: boolean, loadPicture: boolean, requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut', 'productId', productId)
            // verify required parameter 'validateAttributeConditions' is not null or undefined
            assertParamExists('apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut', 'validateAttributeConditions', validateAttributeConditions)
            // verify required parameter 'loadPicture' is not null or undefined
            assertParamExists('apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut', 'loadPicture', loadPicture)
            const localVarPath = `/api-frontend/ShoppingCart/ProductDetailsAttributeChange/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (validateAttributeConditions !== undefined) {
                localVarQueryParameter['validateAttributeConditions'] = validateAttributeConditions;
            }

            if (loadPicture !== undefined) {
                localVarQueryParameter['loadPicture'] = loadPicture;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartRemoveDiscountCouponPost: async (requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ShoppingCart/RemoveDiscountCoupon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartRemoveGiftCardCodePost: async (requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ShoppingCart/RemoveGiftCardCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartSelectShippingOptionPost: async (name: string, estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiFrontendShoppingCartSelectShippingOptionPost', 'name', name)
            const localVarPath = `/api-frontend/ShoppingCart/SelectShippingOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(estimateShippingModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartUpdateCartPost: async (requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/ShoppingCart/UpdateCart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} attributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost: async (attributeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost', 'attributeId', attributeId)
            const localVarPath = `/api-frontend/ShoppingCart/UploadFileCheckoutAttribute/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} attributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost: async (attributeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost', 'attributeId', attributeId)
            const localVarPath = `/api-frontend/ShoppingCart/UploadFileProductAttribute/{attributeId}`
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingCartApi - functional programming interface
 * @export
 */
export const ShoppingCartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingCartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} productId 
         * @param {ShoppingCartType} shoppingCartType 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost(productId: number, shoppingCartType: ShoppingCartType, quantity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddProductToCartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost(productId, shoppingCartType, quantity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} productId 
         * @param {ShoppingCartType} shoppingCartType 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost(productId: number, shoppingCartType: ShoppingCartType, requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddProductToCartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost(productId, shoppingCartType, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} discountCouponCode 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartApplyDiscountCouponPost(discountCouponCode: string, requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartApplyDiscountCouponPost(discountCouponCode, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} giftCardCouponCode 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartApplyGiftCardPost(giftCardCouponCode: string, requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartApplyGiftCardPost(giftCardCouponCode, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartCartGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartCartGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartCheckoutAttributeChangePost(requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutAttributeChangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartCheckoutAttributeChangePost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartGetEstimateShippingPost(estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateShippingResultModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartGetEstimateShippingPost(estimateShippingModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartMiniCartGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MiniShoppingCartModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartMiniCartGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} productId 
         * @param {boolean} validateAttributeConditions 
         * @param {boolean} loadPicture 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut(productId: number, validateAttributeConditions: boolean, loadPicture: boolean, requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDetailsAttributeChangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut(productId, validateAttributeConditions, loadPicture, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartRemoveDiscountCouponPost(requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartRemoveDiscountCouponPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartRemoveGiftCardCodePost(requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartRemoveGiftCardCodePost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartSelectShippingOptionPost(name: string, estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectShippingOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartSelectShippingOptionPost(name, estimateShippingModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartUpdateCartPost(requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShoppingCartModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartUpdateCartPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} attributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost(attributeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileCheckoutAttributeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost(attributeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} attributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost(attributeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileProductAttributeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost(attributeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShoppingCartApi - factory interface
 * @export
 */
export const ShoppingCartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingCartApiFp(configuration)
    return {
        /**
         * 
         * @param {number} productId 
         * @param {ShoppingCartType} shoppingCartType 
         * @param {number} quantity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost(productId: number, shoppingCartType: ShoppingCartType, quantity: number, options?: any): AxiosPromise<AddProductToCartResponse> {
            return localVarFp.apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost(productId, shoppingCartType, quantity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {ShoppingCartType} shoppingCartType 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost(productId: number, shoppingCartType: ShoppingCartType, requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<AddProductToCartResponse> {
            return localVarFp.apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost(productId, shoppingCartType, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} discountCouponCode 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartApplyDiscountCouponPost(discountCouponCode: string, requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<ShoppingCartModelDto> {
            return localVarFp.apiFrontendShoppingCartApplyDiscountCouponPost(discountCouponCode, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} giftCardCouponCode 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartApplyGiftCardPost(giftCardCouponCode: string, requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<ShoppingCartModelDto> {
            return localVarFp.apiFrontendShoppingCartApplyGiftCardPost(giftCardCouponCode, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartCartGet(options?: any): AxiosPromise<ShoppingCartModelDto> {
            return localVarFp.apiFrontendShoppingCartCartGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartCheckoutAttributeChangePost(requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<CheckoutAttributeChangeResponse> {
            return localVarFp.apiFrontendShoppingCartCheckoutAttributeChangePost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartGetEstimateShippingPost(estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<EstimateShippingResultModelDto> {
            return localVarFp.apiFrontendShoppingCartGetEstimateShippingPost(estimateShippingModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartMiniCartGet(options?: any): AxiosPromise<MiniShoppingCartModelDto> {
            return localVarFp.apiFrontendShoppingCartMiniCartGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} productId 
         * @param {boolean} validateAttributeConditions 
         * @param {boolean} loadPicture 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut(productId: number, validateAttributeConditions: boolean, loadPicture: boolean, requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<ProductDetailsAttributeChangeResponse> {
            return localVarFp.apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut(productId, validateAttributeConditions, loadPicture, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartRemoveDiscountCouponPost(requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<ShoppingCartModelDto> {
            return localVarFp.apiFrontendShoppingCartRemoveDiscountCouponPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartRemoveGiftCardCodePost(requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<ShoppingCartModelDto> {
            return localVarFp.apiFrontendShoppingCartRemoveGiftCardCodePost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartSelectShippingOptionPost(name: string, estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<SelectShippingOptionResponse> {
            return localVarFp.apiFrontendShoppingCartSelectShippingOptionPost(name, estimateShippingModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartUpdateCartPost(requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<ShoppingCartModelDto> {
            return localVarFp.apiFrontendShoppingCartUpdateCartPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} attributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost(attributeId: number, options?: any): AxiosPromise<UploadFileCheckoutAttributeResponse> {
            return localVarFp.apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost(attributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} attributeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost(attributeId: number, options?: any): AxiosPromise<UploadFileProductAttributeResponse> {
            return localVarFp.apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost(attributeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShoppingCartApi - object-oriented interface
 * @export
 * @class ShoppingCartApi
 * @extends {BaseAPI}
 */
export class ShoppingCartApi extends BaseAPI {
    /**
     * 
     * @param {number} productId 
     * @param {ShoppingCartType} shoppingCartType 
     * @param {number} quantity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost(productId: number, shoppingCartType: ShoppingCartType, quantity: number, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartAddProductToCartFromCatalogProductIdPost(productId, shoppingCartType, quantity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {ShoppingCartType} shoppingCartType 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost(productId: number, shoppingCartType: ShoppingCartType, requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartAddProductToCartFromDetailsProductIdPost(productId, shoppingCartType, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} discountCouponCode 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartApplyDiscountCouponPost(discountCouponCode: string, requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartApplyDiscountCouponPost(discountCouponCode, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} giftCardCouponCode 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartApplyGiftCardPost(giftCardCouponCode: string, requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartApplyGiftCardPost(giftCardCouponCode, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartCartGet(options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartCartGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartCheckoutAttributeChangePost(requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartCheckoutAttributeChangePost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartGetEstimateShippingPost(estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartGetEstimateShippingPost(estimateShippingModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartMiniCartGet(options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartMiniCartGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} productId 
     * @param {boolean} validateAttributeConditions 
     * @param {boolean} loadPicture 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut(productId: number, validateAttributeConditions: boolean, loadPicture: boolean, requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartProductDetailsAttributeChangeProductIdPut(productId, validateAttributeConditions, loadPicture, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartRemoveDiscountCouponPost(requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartRemoveDiscountCouponPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartRemoveGiftCardCodePost(requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartRemoveGiftCardCodePost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {EstimateShippingModelDtoBaseModelDtoRequest} [estimateShippingModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartSelectShippingOptionPost(name: string, estimateShippingModelDtoBaseModelDtoRequest?: EstimateShippingModelDtoBaseModelDtoRequest, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartSelectShippingOptionPost(name, estimateShippingModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartUpdateCartPost(requestBody?: { [key: string]: string; }, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartUpdateCartPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} attributeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost(attributeId: number, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartUploadFileCheckoutAttributeAttributeIdPost(attributeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} attributeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost(attributeId: number, options?: any) {
        return ShoppingCartApiFp(this.configuration).apiFrontendShoppingCartUploadFileProductAttributeAttributeIdPost(attributeId, options).then((request) => request(this.axios, this.basePath));
    }
}
