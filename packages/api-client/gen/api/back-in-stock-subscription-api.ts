/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BackInStockSubscribeModelDto } from '../model';
// @ts-ignore
import { CustomerBackInStockSubscriptionsModelDto } from '../model';
/**
 * BackInStockSubscriptionApi - axios parameter creator
 * @export
 */
export const BackInStockSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary My account / Back in stock subscriptions
         * @param {number} [pageNumber] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionCustomerSubscriptionsGet: async (pageNumber?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/BackInStockSubscription/CustomerSubscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionCustomerSubscriptionsPOSTPost: async (requestBody?: { [key: string]: string; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/BackInStockSubscription/CustomerSubscriptionsPOST`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Back in stock subscribe
         * @param {number} productId Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost', 'productId', productId)
            const localVarPath = `/api-frontend/BackInStockSubscription/SubscribePopupPOST/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Product details page > back in stock subscribe
         * @param {number} productId The product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/BackInStockSubscription/SubscribePopup/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BackInStockSubscriptionApi - functional programming interface
 * @export
 */
export const BackInStockSubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BackInStockSubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary My account / Back in stock subscriptions
         * @param {number} [pageNumber] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBackInStockSubscriptionCustomerSubscriptionsGet(pageNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerBackInStockSubscriptionsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBackInStockSubscriptionCustomerSubscriptionsGet(pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBackInStockSubscriptionCustomerSubscriptionsPOSTPost(requestBody?: { [key: string]: string; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerBackInStockSubscriptionsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBackInStockSubscriptionCustomerSubscriptionsPOSTPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Back in stock subscribe
         * @param {number} productId Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Product details page > back in stock subscribe
         * @param {number} productId The product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackInStockSubscribeModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BackInStockSubscriptionApi - factory interface
 * @export
 */
export const BackInStockSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BackInStockSubscriptionApiFp(configuration)
    return {
        /**
         * 
         * @summary My account / Back in stock subscriptions
         * @param {number} [pageNumber] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionCustomerSubscriptionsGet(pageNumber?: number, options?: any): AxiosPromise<CustomerBackInStockSubscriptionsModelDto> {
            return localVarFp.apiFrontendBackInStockSubscriptionCustomerSubscriptionsGet(pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionCustomerSubscriptionsPOSTPost(requestBody?: { [key: string]: string; }, options?: any): AxiosPromise<CustomerBackInStockSubscriptionsModelDto> {
            return localVarFp.apiFrontendBackInStockSubscriptionCustomerSubscriptionsPOSTPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Back in stock subscribe
         * @param {number} productId Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost(productId: number, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Product details page > back in stock subscribe
         * @param {number} productId The product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet(productId: number, options?: any): AxiosPromise<BackInStockSubscribeModelDto> {
            return localVarFp.apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BackInStockSubscriptionApi - object-oriented interface
 * @export
 * @class BackInStockSubscriptionApi
 * @extends {BaseAPI}
 */
export class BackInStockSubscriptionApi extends BaseAPI {
    /**
     * 
     * @summary My account / Back in stock subscriptions
     * @param {number} [pageNumber] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackInStockSubscriptionApi
     */
    public apiFrontendBackInStockSubscriptionCustomerSubscriptionsGet(pageNumber?: number, options?: any) {
        return BackInStockSubscriptionApiFp(this.configuration).apiFrontendBackInStockSubscriptionCustomerSubscriptionsGet(pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: string; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackInStockSubscriptionApi
     */
    public apiFrontendBackInStockSubscriptionCustomerSubscriptionsPOSTPost(requestBody?: { [key: string]: string; }, options?: any) {
        return BackInStockSubscriptionApiFp(this.configuration).apiFrontendBackInStockSubscriptionCustomerSubscriptionsPOSTPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Back in stock subscribe
     * @param {number} productId Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackInStockSubscriptionApi
     */
    public apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost(productId: number, options?: any) {
        return BackInStockSubscriptionApiFp(this.configuration).apiFrontendBackInStockSubscriptionSubscribePopupPOSTProductIdPost(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Product details page > back in stock subscribe
     * @param {number} productId The product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackInStockSubscriptionApi
     */
    public apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet(productId: number, options?: any) {
        return BackInStockSubscriptionApiFp(this.configuration).apiFrontendBackInStockSubscriptionSubscribePopupProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }
}
