/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * DownloadApi - axios parameter creator
 * @export
 */
export const DownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get download
         * @param {string} orderItemGuid Order item GUID
         * @param {boolean} [agree] Is agree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetDownloadGet: async (orderItemGuid: string, agree?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderItemGuid' is not null or undefined
            assertParamExists('apiFrontendDownloadGetDownloadGet', 'orderItemGuid', orderItemGuid)
            const localVarPath = `/api-frontend/Download/GetDownload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (orderItemGuid !== undefined) {
                localVarQueryParameter['orderItemGuid'] = orderItemGuid;
            }

            if (agree !== undefined) {
                localVarQueryParameter['agree'] = agree;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get file upload
         * @param {string} downloadGuid Download GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetFileUploadGet: async (downloadGuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadGuid' is not null or undefined
            assertParamExists('apiFrontendDownloadGetFileUploadGet', 'downloadGuid', downloadGuid)
            const localVarPath = `/api-frontend/Download/GetFileUpload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (downloadGuid !== undefined) {
                localVarQueryParameter['downloadGuid'] = downloadGuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get license
         * @param {string} orderItemGuid Orer item GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetLicenseGet: async (orderItemGuid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderItemGuid' is not null or undefined
            assertParamExists('apiFrontendDownloadGetLicenseGet', 'orderItemGuid', orderItemGuid)
            const localVarPath = `/api-frontend/Download/GetLicense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (orderItemGuid !== undefined) {
                localVarQueryParameter['orderItemGuid'] = orderItemGuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order note file
         * @param {number} orderNoteId Order note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet: async (orderNoteId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderNoteId' is not null or undefined
            assertParamExists('apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet', 'orderNoteId', orderNoteId)
            const localVarPath = `/api-frontend/Download/GetOrderNoteFile/{orderNoteId}`
                .replace(`{${"orderNoteId"}}`, encodeURIComponent(String(orderNoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sample
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadSampleProductIdGet: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendDownloadSampleProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/Download/Sample/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadApi - functional programming interface
 * @export
 */
export const DownloadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get download
         * @param {string} orderItemGuid Order item GUID
         * @param {boolean} [agree] Is agree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendDownloadGetDownloadGet(orderItemGuid: string, agree?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendDownloadGetDownloadGet(orderItemGuid, agree, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get file upload
         * @param {string} downloadGuid Download GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendDownloadGetFileUploadGet(downloadGuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendDownloadGetFileUploadGet(downloadGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get license
         * @param {string} orderItemGuid Orer item GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendDownloadGetLicenseGet(orderItemGuid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendDownloadGetLicenseGet(orderItemGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get order note file
         * @param {number} orderNoteId Order note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet(orderNoteId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet(orderNoteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sample
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendDownloadSampleProductIdGet(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendDownloadSampleProductIdGet(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DownloadApi - factory interface
 * @export
 */
export const DownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadApiFp(configuration)
    return {
        /**
         * 
         * @summary Get download
         * @param {string} orderItemGuid Order item GUID
         * @param {boolean} [agree] Is agree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetDownloadGet(orderItemGuid: string, agree?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendDownloadGetDownloadGet(orderItemGuid, agree, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get file upload
         * @param {string} downloadGuid Download GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetFileUploadGet(downloadGuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendDownloadGetFileUploadGet(downloadGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get license
         * @param {string} orderItemGuid Orer item GUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetLicenseGet(orderItemGuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendDownloadGetLicenseGet(orderItemGuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order note file
         * @param {number} orderNoteId Order note identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet(orderNoteId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet(orderNoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sample
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendDownloadSampleProductIdGet(productId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendDownloadSampleProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadApi - object-oriented interface
 * @export
 * @class DownloadApi
 * @extends {BaseAPI}
 */
export class DownloadApi extends BaseAPI {
    /**
     * 
     * @summary Get download
     * @param {string} orderItemGuid Order item GUID
     * @param {boolean} [agree] Is agree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public apiFrontendDownloadGetDownloadGet(orderItemGuid: string, agree?: boolean, options?: any) {
        return DownloadApiFp(this.configuration).apiFrontendDownloadGetDownloadGet(orderItemGuid, agree, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get file upload
     * @param {string} downloadGuid Download GUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public apiFrontendDownloadGetFileUploadGet(downloadGuid: string, options?: any) {
        return DownloadApiFp(this.configuration).apiFrontendDownloadGetFileUploadGet(downloadGuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get license
     * @param {string} orderItemGuid Orer item GUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public apiFrontendDownloadGetLicenseGet(orderItemGuid: string, options?: any) {
        return DownloadApiFp(this.configuration).apiFrontendDownloadGetLicenseGet(orderItemGuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order note file
     * @param {number} orderNoteId Order note identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet(orderNoteId: number, options?: any) {
        return DownloadApiFp(this.configuration).apiFrontendDownloadGetOrderNoteFileOrderNoteIdGet(orderNoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sample
     * @param {number} productId Product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public apiFrontendDownloadSampleProductIdGet(productId: number, options?: any) {
        return DownloadApiFp(this.configuration).apiFrontendDownloadSampleProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }
}
