/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CatalogProductsCommandDto } from '../model';
// @ts-ignore
import { CategoryResponse } from '../model';
// @ts-ignore
import { CategorySimpleModelDto } from '../model';
// @ts-ignore
import { GetCategoryProductsResponse } from '../model';
// @ts-ignore
import { GetManufacturerProductsResponse } from '../model';
// @ts-ignore
import { GetTagProductsResponse } from '../model';
// @ts-ignore
import { GetVendorProductsResponse } from '../model';
// @ts-ignore
import { ManufacturerModelDto } from '../model';
// @ts-ignore
import { ManufacturerResponse } from '../model';
// @ts-ignore
import { PopularProductTagsModelDto } from '../model';
// @ts-ignore
import { ProductsByTagModelDto } from '../model';
// @ts-ignore
import { SearchModelDto } from '../model';
// @ts-ignore
import { SearchProductsResponse } from '../model';
// @ts-ignore
import { SearchRequest } from '../model';
// @ts-ignore
import { SearchTermAutoCompleteResponse } from '../model';
// @ts-ignore
import { VendorModelDto } from '../model';
/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get catalog root (list of categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCatalogRootGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Catalog/GetCatalogRoot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get catalog sub categories
         * @param {number} id Category identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCatalogSubCategoriesIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendCatalogGetCatalogSubCategoriesIdGet', 'id', id)
            const localVarPath = `/api-frontend/Catalog/GetCatalogSubCategories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get category
         * @param {number} categoryId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCategoryCategoryIdPost: async (categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetCategoryCategoryIdPost', 'categoryId', categoryId)
            const localVarPath = `/api-frontend/Catalog/GetCategory/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the category products
         * @param {number} categoryId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCategoryProductsCategoryIdPost: async (categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetCategoryProductsCategoryIdPost', 'categoryId', categoryId)
            const localVarPath = `/api-frontend/Catalog/GetCategoryProducts/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get manufacturer
         * @param {number} manufacturerId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetManufacturerManufacturerIdPost: async (manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'manufacturerId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetManufacturerManufacturerIdPost', 'manufacturerId', manufacturerId)
            const localVarPath = `/api-frontend/Catalog/GetManufacturer/{manufacturerId}`
                .replace(`{${"manufacturerId"}}`, encodeURIComponent(String(manufacturerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get manufacturer products
         * @param {number} manufacturerId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetManufacturerProductsManufacturerIdPost: async (manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'manufacturerId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetManufacturerProductsManufacturerIdPost', 'manufacturerId', manufacturerId)
            const localVarPath = `/api-frontend/Catalog/GetManufacturerProducts/{manufacturerId}`
                .replace(`{${"manufacturerId"}}`, encodeURIComponent(String(manufacturerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get products by tag
         * @param {number} productTagId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetProductsByTagProductTagIdPost: async (productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTagId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetProductsByTagProductTagIdPost', 'productTagId', productTagId)
            const localVarPath = `/api-frontend/Catalog/GetProductsByTag/{productTagId}`
                .replace(`{${"productTagId"}}`, encodeURIComponent(String(productTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tag products
         * @param {number} productTagId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetTagProductsProductTagIdPost: async (productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTagId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetTagProductsProductTagIdPost', 'productTagId', productTagId)
            const localVarPath = `/api-frontend/Catalog/GetTagProducts/{productTagId}`
                .replace(`{${"productTagId"}}`, encodeURIComponent(String(productTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get vendor products
         * @param {number} vendorId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetVendorProductsVendorIdPost: async (vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetVendorProductsVendorIdPost', 'vendorId', vendorId)
            const localVarPath = `/api-frontend/Catalog/GetVendorProducts/{vendorId}`
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Vendor
         * @param {number} vendorId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetVendorVendorIdPost: async (vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('apiFrontendCatalogGetVendorVendorIdPost', 'vendorId', vendorId)
            const localVarPath = `/api-frontend/Catalog/GetVendor/{vendorId}`
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogProductsCommandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all manufacturers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogManufacturerAllGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Catalog/ManufacturerAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all popular product tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogProductTagsAllGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Catalog/ProductTagsAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogSearchPost: async (searchRequest?: SearchRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Catalog/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search products
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogSearchProductsPost: async (searchRequest?: SearchRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Catalog/SearchProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search term auto complete
         * @param {string} term 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogSearchTermAutoCompleteGet: async (term: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'term' is not null or undefined
            assertParamExists('apiFrontendCatalogSearchTermAutoCompleteGet', 'term', term)
            const localVarPath = `/api-frontend/Catalog/SearchTermAutoComplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all vendors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogVendorAllGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Catalog/VendorAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get catalog root (list of categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetCatalogRootGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategorySimpleModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetCatalogRootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get catalog sub categories
         * @param {number} id Category identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetCatalogSubCategoriesIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategorySimpleModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetCatalogSubCategoriesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get category
         * @param {number} categoryId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetCategoryCategoryIdPost(categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetCategoryCategoryIdPost(categoryId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the category products
         * @param {number} categoryId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetCategoryProductsCategoryIdPost(categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategoryProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetCategoryProductsCategoryIdPost(categoryId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get manufacturer
         * @param {number} manufacturerId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetManufacturerManufacturerIdPost(manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManufacturerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetManufacturerManufacturerIdPost(manufacturerId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get manufacturer products
         * @param {number} manufacturerId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetManufacturerProductsManufacturerIdPost(manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManufacturerProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetManufacturerProductsManufacturerIdPost(manufacturerId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get products by tag
         * @param {number} productTagId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetProductsByTagProductTagIdPost(productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductsByTagModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetProductsByTagProductTagIdPost(productTagId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tag products
         * @param {number} productTagId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetTagProductsProductTagIdPost(productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTagProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetTagProductsProductTagIdPost(productTagId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get vendor products
         * @param {number} vendorId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetVendorProductsVendorIdPost(vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVendorProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetVendorProductsVendorIdPost(vendorId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Vendor
         * @param {number} vendorId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogGetVendorVendorIdPost(vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogGetVendorVendorIdPost(vendorId, catalogProductsCommandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all manufacturers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogManufacturerAllGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ManufacturerModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogManufacturerAllGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all popular product tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogProductTagsAllGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PopularProductTagsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogProductTagsAllGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogSearchPost(searchRequest?: SearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogSearchPost(searchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search products
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogSearchProductsPost(searchRequest?: SearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogSearchProductsPost(searchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search term auto complete
         * @param {string} term 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogSearchTermAutoCompleteGet(term: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchTermAutoCompleteResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogSearchTermAutoCompleteGet(term, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all vendors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCatalogVendorAllGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCatalogVendorAllGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogApiFp(configuration)
    return {
        /**
         * 
         * @summary Get catalog root (list of categories)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCatalogRootGet(options?: any): AxiosPromise<Array<CategorySimpleModelDto>> {
            return localVarFp.apiFrontendCatalogGetCatalogRootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get catalog sub categories
         * @param {number} id Category identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCatalogSubCategoriesIdGet(id: number, options?: any): AxiosPromise<Array<CategorySimpleModelDto>> {
            return localVarFp.apiFrontendCatalogGetCatalogSubCategoriesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get category
         * @param {number} categoryId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCategoryCategoryIdPost(categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<CategoryResponse> {
            return localVarFp.apiFrontendCatalogGetCategoryCategoryIdPost(categoryId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the category products
         * @param {number} categoryId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetCategoryProductsCategoryIdPost(categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<GetCategoryProductsResponse> {
            return localVarFp.apiFrontendCatalogGetCategoryProductsCategoryIdPost(categoryId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get manufacturer
         * @param {number} manufacturerId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetManufacturerManufacturerIdPost(manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<ManufacturerResponse> {
            return localVarFp.apiFrontendCatalogGetManufacturerManufacturerIdPost(manufacturerId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get manufacturer products
         * @param {number} manufacturerId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetManufacturerProductsManufacturerIdPost(manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<GetManufacturerProductsResponse> {
            return localVarFp.apiFrontendCatalogGetManufacturerProductsManufacturerIdPost(manufacturerId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get products by tag
         * @param {number} productTagId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetProductsByTagProductTagIdPost(productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<ProductsByTagModelDto> {
            return localVarFp.apiFrontendCatalogGetProductsByTagProductTagIdPost(productTagId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tag products
         * @param {number} productTagId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetTagProductsProductTagIdPost(productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<GetTagProductsResponse> {
            return localVarFp.apiFrontendCatalogGetTagProductsProductTagIdPost(productTagId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get vendor products
         * @param {number} vendorId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetVendorProductsVendorIdPost(vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<GetVendorProductsResponse> {
            return localVarFp.apiFrontendCatalogGetVendorProductsVendorIdPost(vendorId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Vendor
         * @param {number} vendorId 
         * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogGetVendorVendorIdPost(vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any): AxiosPromise<VendorModelDto> {
            return localVarFp.apiFrontendCatalogGetVendorVendorIdPost(vendorId, catalogProductsCommandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all manufacturers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogManufacturerAllGet(options?: any): AxiosPromise<Array<ManufacturerModelDto>> {
            return localVarFp.apiFrontendCatalogManufacturerAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all popular product tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogProductTagsAllGet(options?: any): AxiosPromise<PopularProductTagsModelDto> {
            return localVarFp.apiFrontendCatalogProductTagsAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogSearchPost(searchRequest?: SearchRequest, options?: any): AxiosPromise<SearchModelDto> {
            return localVarFp.apiFrontendCatalogSearchPost(searchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search products
         * @param {SearchRequest} [searchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogSearchProductsPost(searchRequest?: SearchRequest, options?: any): AxiosPromise<SearchProductsResponse> {
            return localVarFp.apiFrontendCatalogSearchProductsPost(searchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search term auto complete
         * @param {string} term 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogSearchTermAutoCompleteGet(term: string, options?: any): AxiosPromise<Array<SearchTermAutoCompleteResponse>> {
            return localVarFp.apiFrontendCatalogSearchTermAutoCompleteGet(term, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all vendors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCatalogVendorAllGet(options?: any): AxiosPromise<Array<VendorModelDto>> {
            return localVarFp.apiFrontendCatalogVendorAllGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * 
     * @summary Get catalog root (list of categories)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetCatalogRootGet(options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetCatalogRootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get catalog sub categories
     * @param {number} id Category identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetCatalogSubCategoriesIdGet(id: number, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetCatalogSubCategoriesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get category
     * @param {number} categoryId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetCategoryCategoryIdPost(categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetCategoryCategoryIdPost(categoryId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the category products
     * @param {number} categoryId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetCategoryProductsCategoryIdPost(categoryId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetCategoryProductsCategoryIdPost(categoryId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get manufacturer
     * @param {number} manufacturerId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetManufacturerManufacturerIdPost(manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetManufacturerManufacturerIdPost(manufacturerId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get manufacturer products
     * @param {number} manufacturerId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetManufacturerProductsManufacturerIdPost(manufacturerId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetManufacturerProductsManufacturerIdPost(manufacturerId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get products by tag
     * @param {number} productTagId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetProductsByTagProductTagIdPost(productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetProductsByTagProductTagIdPost(productTagId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tag products
     * @param {number} productTagId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetTagProductsProductTagIdPost(productTagId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetTagProductsProductTagIdPost(productTagId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get vendor products
     * @param {number} vendorId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetVendorProductsVendorIdPost(vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetVendorProductsVendorIdPost(vendorId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Vendor
     * @param {number} vendorId 
     * @param {CatalogProductsCommandDto} [catalogProductsCommandDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogGetVendorVendorIdPost(vendorId: number, catalogProductsCommandDto?: CatalogProductsCommandDto, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogGetVendorVendorIdPost(vendorId, catalogProductsCommandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all manufacturers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogManufacturerAllGet(options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogManufacturerAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all popular product tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogProductTagsAllGet(options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogProductTagsAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SearchRequest} [searchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogSearchPost(searchRequest?: SearchRequest, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogSearchPost(searchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search products
     * @param {SearchRequest} [searchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogSearchProductsPost(searchRequest?: SearchRequest, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogSearchProductsPost(searchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search term auto complete
     * @param {string} term 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogSearchTermAutoCompleteGet(term: string, options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogSearchTermAutoCompleteGet(term, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all vendors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiFrontendCatalogVendorAllGet(options?: any) {
        return CatalogApiFp(this.configuration).apiFrontendCatalogVendorAllGet(options).then((request) => request(this.axios, this.basePath));
    }
}
