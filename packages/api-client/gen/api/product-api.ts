/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddProductToCompareListResponse } from '../model';
// @ts-ignore
import { CompareProductsModelDto } from '../model';
// @ts-ignore
import { CustomerProductReviewsModelDto } from '../model';
// @ts-ignore
import { EstimateShippingResultModelDto } from '../model';
// @ts-ignore
import { ProductCombinationModelDto } from '../model';
// @ts-ignore
import { ProductDetailsResponse } from '../model';
// @ts-ignore
import { ProductEmailAFriendModelDto } from '../model';
// @ts-ignore
import { ProductEstimateShippingModelDtoBaseModelDtoRequest } from '../model';
// @ts-ignore
import { ProductOverviewModelDto } from '../model';
// @ts-ignore
import { ProductReviewsModelDto } from '../model';
// @ts-ignore
import { SetProductReviewHelpfulnessResponse } from '../model';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add product to compare list
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductAddProductToCompareListProductIdGet: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendProductAddProductToCompareListProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/Product/AddProductToCompareList/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clear compare products list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductClearCompareListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/ClearCompareList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Compare products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductCompareProductsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/CompareProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Customer product reviews for current customer
         * @param {number} [pageNumber] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductCustomerProductReviewsGet: async (pageNumber?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/CustomerProductReviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the estimate shipping
         * @param {ProductEstimateShippingModelDtoBaseModelDtoRequest} [productEstimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductEstimateShippingPost: async (productEstimateShippingModelDtoBaseModelDtoRequest?: ProductEstimateShippingModelDtoBaseModelDtoRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/EstimateShipping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productEstimateShippingModelDtoBaseModelDtoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product combinations
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductGetProductCombinationsProductIdGet: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendProductGetProductCombinationsProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/Product/GetProductCombinations/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the product details
         * @param {number} productId 
         * @param {number} [updateCartItemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductGetProductDetailsProductIdGet: async (productId: number, updateCartItemId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendProductGetProductDetailsProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/Product/GetProductDetails/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (updateCartItemId !== undefined) {
                localVarQueryParameter['updateCartItemId'] = updateCartItemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a new products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductNewProductsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/NewProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary New products RSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductNewProductsRssGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/NewProductsRss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ProductEmailAFriend
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductEmailAFriendProductIdGet: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendProductProductEmailAFriendProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/Product/ProductEmailAFriend/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send the product email a friend
         * @param {ProductEmailAFriendModelDto} [productEmailAFriendModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductEmailAFriendSendPost: async (productEmailAFriendModelDto?: ProductEmailAFriendModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/ProductEmailAFriendSend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productEmailAFriendModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add product reviews
         * @param {number} productId 
         * @param {ProductReviewsModelDto} [productReviewsModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductReviewsAddProductIdPost: async (productId: number, productReviewsModelDto?: ProductReviewsModelDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendProductProductReviewsAddProductIdPost', 'productId', productId)
            const localVarPath = `/api-frontend/Product/ProductReviewsAdd/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productReviewsModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product reviews
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductReviewsProductIdGet: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendProductProductReviewsProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/Product/ProductReviews/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get recently viewed products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductRecentlyViewedProductsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Product/RecentlyViewedProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove product from compare list
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductRemoveProductFromCompareListProductIdGet: async (productId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiFrontendProductRemoveProductFromCompareListProductIdGet', 'productId', productId)
            const localVarPath = `/api-frontend/Product/RemoveProductFromCompareList/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set product review helpfulness
         * @param {number} productReviewId Product review identifier
         * @param {boolean} washelpful Indicator if the review was helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost: async (productReviewId: number, washelpful: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productReviewId' is not null or undefined
            assertParamExists('apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost', 'productReviewId', productReviewId)
            // verify required parameter 'washelpful' is not null or undefined
            assertParamExists('apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost', 'washelpful', washelpful)
            const localVarPath = `/api-frontend/Product/SetProductReviewHelpfulness/{productReviewId}`
                .replace(`{${"productReviewId"}}`, encodeURIComponent(String(productReviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (washelpful !== undefined) {
                localVarQueryParameter['washelpful'] = washelpful;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add product to compare list
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductAddProductToCompareListProductIdGet(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddProductToCompareListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductAddProductToCompareListProductIdGet(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clear compare products list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductClearCompareListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductClearCompareListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Compare products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductCompareProductsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompareProductsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductCompareProductsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Customer product reviews for current customer
         * @param {number} [pageNumber] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductCustomerProductReviewsGet(pageNumber?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProductReviewsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductCustomerProductReviewsGet(pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the estimate shipping
         * @param {ProductEstimateShippingModelDtoBaseModelDtoRequest} [productEstimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductEstimateShippingPost(productEstimateShippingModelDtoBaseModelDtoRequest?: ProductEstimateShippingModelDtoBaseModelDtoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateShippingResultModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductEstimateShippingPost(productEstimateShippingModelDtoBaseModelDtoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get product combinations
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductGetProductCombinationsProductIdGet(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductCombinationModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductGetProductCombinationsProductIdGet(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the product details
         * @param {number} productId 
         * @param {number} [updateCartItemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductGetProductDetailsProductIdGet(productId: number, updateCartItemId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductGetProductDetailsProductIdGet(productId, updateCartItemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a new products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductNewProductsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOverviewModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductNewProductsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary New products RSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductNewProductsRssGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductNewProductsRssGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ProductEmailAFriend
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductProductEmailAFriendProductIdGet(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductEmailAFriendModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductProductEmailAFriendProductIdGet(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send the product email a friend
         * @param {ProductEmailAFriendModelDto} [productEmailAFriendModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductProductEmailAFriendSendPost(productEmailAFriendModelDto?: ProductEmailAFriendModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductEmailAFriendModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductProductEmailAFriendSendPost(productEmailAFriendModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add product reviews
         * @param {number} productId 
         * @param {ProductReviewsModelDto} [productReviewsModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductProductReviewsAddProductIdPost(productId: number, productReviewsModelDto?: ProductReviewsModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductProductReviewsAddProductIdPost(productId, productReviewsModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get product reviews
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductProductReviewsProductIdGet(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductProductReviewsProductIdGet(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get recently viewed products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductRecentlyViewedProductsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOverviewModelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductRecentlyViewedProductsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove product from compare list
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductRemoveProductFromCompareListProductIdGet(productId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductRemoveProductFromCompareListProductIdGet(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set product review helpfulness
         * @param {number} productReviewId Product review identifier
         * @param {boolean} washelpful Indicator if the review was helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost(productReviewId: number, washelpful: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetProductReviewHelpfulnessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost(productReviewId, washelpful, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @summary Add product to compare list
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductAddProductToCompareListProductIdGet(productId: number, options?: any): AxiosPromise<AddProductToCompareListResponse> {
            return localVarFp.apiFrontendProductAddProductToCompareListProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clear compare products list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductClearCompareListGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendProductClearCompareListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Compare products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductCompareProductsGet(options?: any): AxiosPromise<CompareProductsModelDto> {
            return localVarFp.apiFrontendProductCompareProductsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Customer product reviews for current customer
         * @param {number} [pageNumber] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductCustomerProductReviewsGet(pageNumber?: number, options?: any): AxiosPromise<CustomerProductReviewsModelDto> {
            return localVarFp.apiFrontendProductCustomerProductReviewsGet(pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the estimate shipping
         * @param {ProductEstimateShippingModelDtoBaseModelDtoRequest} [productEstimateShippingModelDtoBaseModelDtoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductEstimateShippingPost(productEstimateShippingModelDtoBaseModelDtoRequest?: ProductEstimateShippingModelDtoBaseModelDtoRequest, options?: any): AxiosPromise<EstimateShippingResultModelDto> {
            return localVarFp.apiFrontendProductEstimateShippingPost(productEstimateShippingModelDtoBaseModelDtoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get product combinations
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductGetProductCombinationsProductIdGet(productId: number, options?: any): AxiosPromise<Array<ProductCombinationModelDto>> {
            return localVarFp.apiFrontendProductGetProductCombinationsProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the product details
         * @param {number} productId 
         * @param {number} [updateCartItemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductGetProductDetailsProductIdGet(productId: number, updateCartItemId?: number, options?: any): AxiosPromise<ProductDetailsResponse> {
            return localVarFp.apiFrontendProductGetProductDetailsProductIdGet(productId, updateCartItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a new products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductNewProductsGet(options?: any): AxiosPromise<Array<ProductOverviewModelDto>> {
            return localVarFp.apiFrontendProductNewProductsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary New products RSS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductNewProductsRssGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendProductNewProductsRssGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ProductEmailAFriend
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductEmailAFriendProductIdGet(productId: number, options?: any): AxiosPromise<ProductEmailAFriendModelDto> {
            return localVarFp.apiFrontendProductProductEmailAFriendProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send the product email a friend
         * @param {ProductEmailAFriendModelDto} [productEmailAFriendModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductEmailAFriendSendPost(productEmailAFriendModelDto?: ProductEmailAFriendModelDto, options?: any): AxiosPromise<ProductEmailAFriendModelDto> {
            return localVarFp.apiFrontendProductProductEmailAFriendSendPost(productEmailAFriendModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add product reviews
         * @param {number} productId 
         * @param {ProductReviewsModelDto} [productReviewsModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductReviewsAddProductIdPost(productId: number, productReviewsModelDto?: ProductReviewsModelDto, options?: any): AxiosPromise<ProductReviewsModelDto> {
            return localVarFp.apiFrontendProductProductReviewsAddProductIdPost(productId, productReviewsModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get product reviews
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductProductReviewsProductIdGet(productId: number, options?: any): AxiosPromise<ProductReviewsModelDto> {
            return localVarFp.apiFrontendProductProductReviewsProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get recently viewed products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductRecentlyViewedProductsGet(options?: any): AxiosPromise<Array<ProductOverviewModelDto>> {
            return localVarFp.apiFrontendProductRecentlyViewedProductsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove product from compare list
         * @param {number} productId Product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductRemoveProductFromCompareListProductIdGet(productId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendProductRemoveProductFromCompareListProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set product review helpfulness
         * @param {number} productReviewId Product review identifier
         * @param {boolean} washelpful Indicator if the review was helpful
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost(productReviewId: number, washelpful: boolean, options?: any): AxiosPromise<SetProductReviewHelpfulnessResponse> {
            return localVarFp.apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost(productReviewId, washelpful, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary Add product to compare list
     * @param {number} productId Product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductAddProductToCompareListProductIdGet(productId: number, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductAddProductToCompareListProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clear compare products list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductClearCompareListGet(options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductClearCompareListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Compare products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductCompareProductsGet(options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductCompareProductsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Customer product reviews for current customer
     * @param {number} [pageNumber] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductCustomerProductReviewsGet(pageNumber?: number, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductCustomerProductReviewsGet(pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the estimate shipping
     * @param {ProductEstimateShippingModelDtoBaseModelDtoRequest} [productEstimateShippingModelDtoBaseModelDtoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductEstimateShippingPost(productEstimateShippingModelDtoBaseModelDtoRequest?: ProductEstimateShippingModelDtoBaseModelDtoRequest, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductEstimateShippingPost(productEstimateShippingModelDtoBaseModelDtoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get product combinations
     * @param {number} productId Product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductGetProductCombinationsProductIdGet(productId: number, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductGetProductCombinationsProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the product details
     * @param {number} productId 
     * @param {number} [updateCartItemId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductGetProductDetailsProductIdGet(productId: number, updateCartItemId?: number, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductGetProductDetailsProductIdGet(productId, updateCartItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a new products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductNewProductsGet(options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductNewProductsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary New products RSS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductNewProductsRssGet(options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductNewProductsRssGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ProductEmailAFriend
     * @param {number} productId Product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductProductEmailAFriendProductIdGet(productId: number, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductProductEmailAFriendProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send the product email a friend
     * @param {ProductEmailAFriendModelDto} [productEmailAFriendModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductProductEmailAFriendSendPost(productEmailAFriendModelDto?: ProductEmailAFriendModelDto, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductProductEmailAFriendSendPost(productEmailAFriendModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add product reviews
     * @param {number} productId 
     * @param {ProductReviewsModelDto} [productReviewsModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductProductReviewsAddProductIdPost(productId: number, productReviewsModelDto?: ProductReviewsModelDto, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductProductReviewsAddProductIdPost(productId, productReviewsModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get product reviews
     * @param {number} productId Product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductProductReviewsProductIdGet(productId: number, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductProductReviewsProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get recently viewed products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductRecentlyViewedProductsGet(options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductRecentlyViewedProductsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove product from compare list
     * @param {number} productId Product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductRemoveProductFromCompareListProductIdGet(productId: number, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductRemoveProductFromCompareListProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set product review helpfulness
     * @param {number} productReviewId Product review identifier
     * @param {boolean} washelpful Indicator if the review was helpful
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost(productReviewId: number, washelpful: boolean, options?: any) {
        return ProductApiFp(this.configuration).apiFrontendProductSetProductReviewHelpfulnessProductReviewIdPost(productReviewId, washelpful, options).then((request) => request(this.axios, this.basePath));
    }
}
