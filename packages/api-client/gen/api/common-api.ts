/* tslint:disable */
/* eslint-disable */
/**
 * nopCommerce Web API Frontend
 * Official nopCommerce Web API for public store
 *
 * The version of the OpenAPI document: v1.05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContactUsModelDto } from '../model';
// @ts-ignore
import { ContactVendorModelDto } from '../model';
// @ts-ignore
import { RobotsTextFileResponse } from '../model';
// @ts-ignore
import { SitemapModelDto } from '../model';
// @ts-ignore
import { SitemapPageModelDto } from '../model';
// @ts-ignore
import { SitemapXmlResponse } from '../model';
// @ts-ignore
import { TaxDisplayType } from '../model';
/**
 * CommonApi - axios parameter creator
 * @export
 */
export const CommonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Contact us page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactUsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Common/ContactUs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Contact us send
         * @param {ContactUsModelDto} [contactUsModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactUsSendPost: async (contactUsModelDto?: ContactUsModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Common/ContactUsSend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactUsModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Contact vendor vend
         * @param {ContactVendorModelDto} [contactVendorModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactVendorSendPost: async (contactVendorModelDto?: ContactVendorModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Common/ContactVendorSend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactVendorModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary contact vendor page
         * @param {number} vendorId Vendor identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactVendorVendorIdGet: async (vendorId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('apiFrontendCommonContactVendorVendorIdGet', 'vendorId', vendorId)
            const localVarPath = `/api-frontend/Common/ContactVendor/{vendorId}`
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Eu cookie law accept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonEuCookieLawAcceptGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Common/EuCookieLawAccept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary robots.txt file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonRobotsTextFileGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Common/RobotsTextFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set currency
         * @param {number} customerCurrencyId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetCurrencyCustomerCurrencyIdPost: async (customerCurrencyId: number, returnUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCurrencyId' is not null or undefined
            assertParamExists('apiFrontendCommonSetCurrencyCustomerCurrencyIdPost', 'customerCurrencyId', customerCurrencyId)
            // verify required parameter 'returnUrl' is not null or undefined
            assertParamExists('apiFrontendCommonSetCurrencyCustomerCurrencyIdPost', 'returnUrl', returnUrl)
            const localVarPath = `/api-frontend/Common/SetCurrency/{customerCurrencyId}`
                .replace(`{${"customerCurrencyId"}}`, encodeURIComponent(String(customerCurrencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set language
         * @param {number} langId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetLanguageLangIdPost: async (langId: number, returnUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'langId' is not null or undefined
            assertParamExists('apiFrontendCommonSetLanguageLangIdPost', 'langId', langId)
            // verify required parameter 'returnUrl' is not null or undefined
            assertParamExists('apiFrontendCommonSetLanguageLangIdPost', 'returnUrl', returnUrl)
            const localVarPath = `/api-frontend/Common/SetLanguage/{langId}`
                .replace(`{${"langId"}}`, encodeURIComponent(String(langId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set store theme
         * @param {string} themeName Theme name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetStoreThemeGet: async (themeName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'themeName' is not null or undefined
            assertParamExists('apiFrontendCommonSetStoreThemeGet', 'themeName', themeName)
            const localVarPath = `/api-frontend/Common/SetStoreTheme`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (themeName !== undefined) {
                localVarQueryParameter['themeName'] = themeName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set tax type
         * @param {TaxDisplayType} customerTaxType 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetTaxTypePost: async (customerTaxType: TaxDisplayType, returnUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerTaxType' is not null or undefined
            assertParamExists('apiFrontendCommonSetTaxTypePost', 'customerTaxType', customerTaxType)
            // verify required parameter 'returnUrl' is not null or undefined
            assertParamExists('apiFrontendCommonSetTaxTypePost', 'returnUrl', returnUrl)
            const localVarPath = `/api-frontend/Common/SetTaxType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (customerTaxType !== undefined) {
                localVarQueryParameter['customerTaxType'] = customerTaxType;
            }

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sitemap page
         * @param {SitemapPageModelDto} [sitemapPageModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSitemapPost: async (sitemapPageModelDto?: SitemapPageModelDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-frontend/Common/Sitemap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sitemapPageModelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SEO sitemap page
         * @param {number} id Sitemap identifier; pass 0 to load the first sitemap or sitemap index file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSitemapXmlIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiFrontendCommonSitemapXmlIdGet', 'id', id)
            const localVarPath = `/api-frontend/Common/SitemapXml/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonApi - functional programming interface
 * @export
 */
export const CommonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Contact us page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonContactUsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactUsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonContactUsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Contact us send
         * @param {ContactUsModelDto} [contactUsModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonContactUsSendPost(contactUsModelDto?: ContactUsModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactUsModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonContactUsSendPost(contactUsModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Contact vendor vend
         * @param {ContactVendorModelDto} [contactVendorModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonContactVendorSendPost(contactVendorModelDto?: ContactVendorModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactVendorModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonContactVendorSendPost(contactVendorModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary contact vendor page
         * @param {number} vendorId Vendor identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonContactVendorVendorIdGet(vendorId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactVendorModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonContactVendorVendorIdGet(vendorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Eu cookie law accept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonEuCookieLawAcceptGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonEuCookieLawAcceptGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary robots.txt file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonRobotsTextFileGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RobotsTextFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonRobotsTextFileGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set currency
         * @param {number} customerCurrencyId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonSetCurrencyCustomerCurrencyIdPost(customerCurrencyId: number, returnUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonSetCurrencyCustomerCurrencyIdPost(customerCurrencyId, returnUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set language
         * @param {number} langId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonSetLanguageLangIdPost(langId: number, returnUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonSetLanguageLangIdPost(langId, returnUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set store theme
         * @param {string} themeName Theme name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonSetStoreThemeGet(themeName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonSetStoreThemeGet(themeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set tax type
         * @param {TaxDisplayType} customerTaxType 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonSetTaxTypePost(customerTaxType: TaxDisplayType, returnUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonSetTaxTypePost(customerTaxType, returnUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sitemap page
         * @param {SitemapPageModelDto} [sitemapPageModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonSitemapPost(sitemapPageModelDto?: SitemapPageModelDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitemapModelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonSitemapPost(sitemapPageModelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SEO sitemap page
         * @param {number} id Sitemap identifier; pass 0 to load the first sitemap or sitemap index file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFrontendCommonSitemapXmlIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SitemapXmlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFrontendCommonSitemapXmlIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommonApi - factory interface
 * @export
 */
export const CommonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommonApiFp(configuration)
    return {
        /**
         * 
         * @summary Contact us page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactUsGet(options?: any): AxiosPromise<ContactUsModelDto> {
            return localVarFp.apiFrontendCommonContactUsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Contact us send
         * @param {ContactUsModelDto} [contactUsModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactUsSendPost(contactUsModelDto?: ContactUsModelDto, options?: any): AxiosPromise<ContactUsModelDto> {
            return localVarFp.apiFrontendCommonContactUsSendPost(contactUsModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Contact vendor vend
         * @param {ContactVendorModelDto} [contactVendorModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactVendorSendPost(contactVendorModelDto?: ContactVendorModelDto, options?: any): AxiosPromise<ContactVendorModelDto> {
            return localVarFp.apiFrontendCommonContactVendorSendPost(contactVendorModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary contact vendor page
         * @param {number} vendorId Vendor identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonContactVendorVendorIdGet(vendorId: number, options?: any): AxiosPromise<ContactVendorModelDto> {
            return localVarFp.apiFrontendCommonContactVendorVendorIdGet(vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Eu cookie law accept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonEuCookieLawAcceptGet(options?: any): AxiosPromise<boolean> {
            return localVarFp.apiFrontendCommonEuCookieLawAcceptGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary robots.txt file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonRobotsTextFileGet(options?: any): AxiosPromise<RobotsTextFileResponse> {
            return localVarFp.apiFrontendCommonRobotsTextFileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set currency
         * @param {number} customerCurrencyId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetCurrencyCustomerCurrencyIdPost(customerCurrencyId: number, returnUrl: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendCommonSetCurrencyCustomerCurrencyIdPost(customerCurrencyId, returnUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set language
         * @param {number} langId 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetLanguageLangIdPost(langId: number, returnUrl: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendCommonSetLanguageLangIdPost(langId, returnUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set store theme
         * @param {string} themeName Theme name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetStoreThemeGet(themeName: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFrontendCommonSetStoreThemeGet(themeName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set tax type
         * @param {TaxDisplayType} customerTaxType 
         * @param {string} returnUrl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSetTaxTypePost(customerTaxType: TaxDisplayType, returnUrl: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiFrontendCommonSetTaxTypePost(customerTaxType, returnUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sitemap page
         * @param {SitemapPageModelDto} [sitemapPageModelDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSitemapPost(sitemapPageModelDto?: SitemapPageModelDto, options?: any): AxiosPromise<SitemapModelDto> {
            return localVarFp.apiFrontendCommonSitemapPost(sitemapPageModelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SEO sitemap page
         * @param {number} id Sitemap identifier; pass 0 to load the first sitemap or sitemap index file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFrontendCommonSitemapXmlIdGet(id: number, options?: any): AxiosPromise<SitemapXmlResponse> {
            return localVarFp.apiFrontendCommonSitemapXmlIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */
export class CommonApi extends BaseAPI {
    /**
     * 
     * @summary Contact us page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonContactUsGet(options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonContactUsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Contact us send
     * @param {ContactUsModelDto} [contactUsModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonContactUsSendPost(contactUsModelDto?: ContactUsModelDto, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonContactUsSendPost(contactUsModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Contact vendor vend
     * @param {ContactVendorModelDto} [contactVendorModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonContactVendorSendPost(contactVendorModelDto?: ContactVendorModelDto, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonContactVendorSendPost(contactVendorModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary contact vendor page
     * @param {number} vendorId Vendor identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonContactVendorVendorIdGet(vendorId: number, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonContactVendorVendorIdGet(vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Eu cookie law accept
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonEuCookieLawAcceptGet(options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonEuCookieLawAcceptGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary robots.txt file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonRobotsTextFileGet(options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonRobotsTextFileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set currency
     * @param {number} customerCurrencyId 
     * @param {string} returnUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonSetCurrencyCustomerCurrencyIdPost(customerCurrencyId: number, returnUrl: string, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonSetCurrencyCustomerCurrencyIdPost(customerCurrencyId, returnUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set language
     * @param {number} langId 
     * @param {string} returnUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonSetLanguageLangIdPost(langId: number, returnUrl: string, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonSetLanguageLangIdPost(langId, returnUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set store theme
     * @param {string} themeName Theme name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonSetStoreThemeGet(themeName: string, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonSetStoreThemeGet(themeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set tax type
     * @param {TaxDisplayType} customerTaxType 
     * @param {string} returnUrl 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonSetTaxTypePost(customerTaxType: TaxDisplayType, returnUrl: string, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonSetTaxTypePost(customerTaxType, returnUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sitemap page
     * @param {SitemapPageModelDto} [sitemapPageModelDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonSitemapPost(sitemapPageModelDto?: SitemapPageModelDto, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonSitemapPost(sitemapPageModelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SEO sitemap page
     * @param {number} id Sitemap identifier; pass 0 to load the first sitemap or sitemap index file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public apiFrontendCommonSitemapXmlIdGet(id: number, options?: any) {
        return CommonApiFp(this.configuration).apiFrontendCommonSitemapXmlIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
